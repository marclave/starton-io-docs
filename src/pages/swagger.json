{
	"openapi": "3.0.0",
	"paths": {
		"/v2/ipfs/health": {
			"get": {
				"operationId": "IpfsHealthCheck",
				"summary": "",
				"parameters": [],
				"responses": {
					"200": {
						"description": "The Health Check is successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"example": "ok"
										},
										"info": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"error": {
											"type": "object",
											"example": {},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"details": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					},
					"503": {
						"description": "The Health Check is not successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"example": "error"
										},
										"info": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"error": {
											"type": "object",
											"example": {
												"redis": {
													"status": "down",
													"message": "Could not connect"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"details": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												},
												"redis": {
													"status": "down",
													"message": "Could not connect"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"tags": ["Health"]
			}
		},
		"/v2/pinning/pins": {
			"get": {
				"operationId": "PinController_findMany",
				"parameters": [
					{
						"name": "cid",
						"required": false,
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "projectId",
						"required": false,
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"required": false,
						"in": "query",
						"schema": {
							"maxLength": 255,
							"type": "string"
						}
					},
					{
						"name": "match",
						"required": false,
						"in": "query",
						"schema": {
							"enum": ["exact", "iexact", "partial", "ipartial"],
							"type": "string"
						}
					},
					{
						"name": "status",
						"required": false,
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string",
								"enum": ["queued", "pinning", "pinned", "failed", "deleted"]
							}
						}
					},
					{
						"name": "before",
						"required": false,
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "after",
						"required": false,
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "limit",
						"required": false,
						"in": "query",
						"schema": {
							"maximum": 1000,
							"type": "number"
						}
					},
					{
						"name": "page",
						"required": false,
						"in": "query",
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PinResults"
								}
							}
						}
					}
				},
				"tags": ["Pinning"]
			},
			"post": {
				"operationId": "PinController_create",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreatePinDto"
							}
						}
					}
				},
				"responses": {
					"202": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PinStatusEntity"
								}
							}
						}
					},
					"413": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/MAXIMUM_STORAGE_REACHED"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Pinning"]
			}
		},
		"/v2/pinning/pins/{id}": {
			"get": {
				"operationId": "PinController_findOne",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PinStatusEntity"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/UNAUTHORIZED"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Pinning"]
			}
		},
		"/v2/pinning/pins/{requestid}": {
			"post": {
				"operationId": "PinController_replace",
				"parameters": [
					{
						"name": "requestid",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreatePinDto"
							}
						}
					}
				},
				"responses": {
					"202": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PinStatusEntity"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/UNAUTHORIZED"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"413": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/MAXIMUM_STORAGE_REACHED"
										}
									]
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_PROCESS_ENTITY"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Pinning"]
			},
			"delete": {
				"operationId": "PinController_delete",
				"parameters": [
					{
						"name": "requestid",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"202": {
						"description": ""
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/UNAUTHORIZED"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_PROCESS_ENTITY"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Pinning"]
			}
		},
		"/v3/ipfs/pins": {
			"get": {
				"operationId": "IpfsPinsGetAll",
				"summary": "",
				"parameters": [
					{
						"name": "cid",
						"required": false,
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "projectId",
						"required": false,
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"required": false,
						"in": "query",
						"schema": {
							"maxLength": 255,
							"type": "string"
						}
					},
					{
						"name": "match",
						"required": false,
						"in": "query",
						"schema": {
							"enum": ["exact", "iexact", "partial", "ipartial"],
							"type": "string"
						}
					},
					{
						"name": "status",
						"required": false,
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string",
								"enum": ["queued", "pinning", "pinned", "failed", "deleted"]
							}
						}
					},
					{
						"name": "before",
						"required": false,
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "after",
						"required": false,
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "limit",
						"required": false,
						"in": "query",
						"schema": {
							"maximum": 1000,
							"type": "number"
						}
					},
					{
						"name": "page",
						"required": false,
						"in": "query",
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PinResults"
								}
							}
						}
					}
				},
				"tags": ["ipfs"]
			},
			"post": {
				"operationId": "IpfsPinsCreateMany",
				"summary": "",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreatePinDto"
							}
						}
					}
				},
				"responses": {
					"202": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PinStatusEntity"
								}
							}
						}
					},
					"413": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/MAXIMUM_STORAGE_REACHED"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["ipfs"]
			}
		},
		"/v3/ipfs/pins/{id}": {
			"get": {
				"operationId": "IpfsPinsGetOne",
				"summary": "",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PinStatusEntity"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/UNAUTHORIZED"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["ipfs"]
			}
		},
		"/v3/ipfs/storage-used": {
			"get": {
				"operationId": "IpfsGetUsedStorage",
				"summary": "",
				"parameters": [],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								}
							}
						}
					}
				},
				"tags": ["ipfs"]
			}
		},
		"/v3/ipfs/pins/{requestid}": {
			"post": {
				"operationId": "IpfsPinsCreateOne",
				"summary": "",
				"parameters": [
					{
						"name": "requestid",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreatePinDto"
							}
						}
					}
				},
				"responses": {
					"202": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PinStatusEntity"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/UNAUTHORIZED"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_PROCESS_ENTITY"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["ipfs"]
			},
			"delete": {
				"operationId": "IpfsPinsDelete",
				"summary": "",
				"parameters": [
					{
						"name": "requestid",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"202": {
						"description": ""
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/UNAUTHORIZED"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_PROCESS_ENTITY"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["ipfs"]
			}
		},
		"/v3/ipfs/file": {
			"post": {
				"operationId": "IpfsFileCreate",
				"summary": "",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateStoreFileRequestDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PinStatusEntity"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"413": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/MAXIMUM_STORAGE_REACHED"
										},
										{
											"$ref": "#/components/schemas/PAYLOAD_TOO_LARGE"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["ipfs"]
			}
		},
		"/v3/ipfs/folder": {
			"post": {
				"operationId": "IpfsFolderCreate",
				"summary": "",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateStoreFolderRequestDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PinStatusEntity"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"413": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/MAXIMUM_STORAGE_REACHED"
										},
										{
											"$ref": "#/components/schemas/PAYLOAD_TOO_LARGE"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["ipfs"]
			}
		},
		"/v3/ipfs/json": {
			"post": {
				"operationId": "IpfsJsonCreate",
				"summary": "",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateStoreJsonRequestDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PinStatusEntity"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"413": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/MAXIMUM_STORAGE_REACHED"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["ipfs"]
			}
		},
		"/v2/pinning/content/file": {
			"post": {
				"operationId": "ContentController_fromFile",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateStoreFileRequestDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StoreContentRequestEntity"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"413": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/MAXIMUM_STORAGE_REACHED"
										},
										{
											"$ref": "#/components/schemas/PAYLOAD_TOO_LARGE"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["PinningContent"]
			}
		},
		"/v2/pinning/content/multiple-contents": {
			"post": {
				"operationId": "ContentController_fromMultipleContents",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateStoreMultipleContentsRequestDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StoreContentRequestEntity"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"413": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/MAXIMUM_STORAGE_REACHED"
										},
										{
											"$ref": "#/components/schemas/PAYLOAD_TOO_LARGE"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["PinningContent"]
			}
		},
		"/v2/pinning/content/json": {
			"post": {
				"operationId": "ContentController_fromJson",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateStoreJsonRequestDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StoreContentRequestEntity"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"413": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/MAXIMUM_STORAGE_REACHED"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["PinningContent"]
			}
		},
		"/v2/pinning/content": {
			"get": {
				"operationId": "ContentController_findMany",
				"parameters": [
					{
						"name": "requestid",
						"required": false,
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "name",
						"required": false,
						"in": "query",
						"schema": {
							"maxLength": 255,
							"type": "string"
						}
					},
					{
						"name": "minSize",
						"required": false,
						"in": "query",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "maxSize",
						"required": false,
						"in": "query",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "match",
						"required": false,
						"in": "query",
						"schema": {
							"enum": ["exact", "iexact", "partial", "ipartial"],
							"type": "string"
						}
					},
					{
						"name": "status",
						"required": false,
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string",
								"enum": ["IN_PROGRESS", "COMPLETED", "FAILED"]
							}
						}
					},
					{
						"name": "before",
						"required": false,
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "after",
						"required": false,
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "limit",
						"required": false,
						"in": "query",
						"schema": {
							"maximum": 1000,
							"type": "number"
						}
					},
					{
						"name": "page",
						"required": false,
						"in": "query",
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StoreContentRequestResults"
								}
							}
						}
					}
				},
				"tags": ["PinningContent"]
			}
		},
		"/v2/pinning/content/{requestid}": {
			"get": {
				"operationId": "ContentController_findOne",
				"parameters": [
					{
						"name": "requestid",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StoreContentRequestEntity"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/UNAUTHORIZED"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["PinningContent"]
			},
			"delete": {
				"operationId": "ContentController_delete",
				"parameters": [
					{
						"name": "requestid",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"202": {
						"description": ""
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/UNAUTHORIZED"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_PROCESS_ENTITY"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["PinningContent"]
			}
		},
		"/v2/relayer/health": {
			"get": {
				"operationId": "RelayerHealthCheck",
				"summary": "",
				"parameters": [],
				"responses": {
					"200": {
						"description": "The Health Check is successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"example": "ok"
										},
										"info": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"error": {
											"type": "object",
											"example": {},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"details": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					},
					"503": {
						"description": "The Health Check is not successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"example": "error"
										},
										"info": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"error": {
											"type": "object",
											"example": {
												"redis": {
													"status": "down",
													"message": "Could not connect"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"details": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												},
												"redis": {
													"status": "down",
													"message": "Could not connect"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"tags": ["Health"]
			}
		},
		"/v2/relayer/health/provider": {
			"get": {
				"operationId": "NetworkHealthCheckAll",
				"summary": "",
				"parameters": [],
				"responses": {
					"200": {
						"description": "The Health Check is successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"example": "ok"
										},
										"info": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"error": {
											"type": "object",
											"example": {},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"details": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					},
					"503": {
						"description": "The Health Check is not successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"example": "error"
										},
										"info": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"error": {
											"type": "object",
											"example": {
												"redis": {
													"status": "down",
													"message": "Could not connect"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"details": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												},
												"redis": {
													"status": "down",
													"message": "Could not connect"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"tags": ["Health"]
			}
		},
		"/v2/relayer/health/provider/{network}": {
			"get": {
				"operationId": "NetworkHealthCheckOne",
				"summary": "",
				"parameters": [
					{
						"name": "network",
						"required": true,
						"in": "path",
						"schema": {
							"enum": [
								"ethereum-mainnet",
								"ethereum-ropsten",
								"ethereum-goerli",
								"binance-mainnet",
								"binance-testnet",
								"polygon-mainnet",
								"polygon-mumbai",
								"avalanche-fuji",
								"avalanche-mainnet"
							],
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The Health Check is successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"example": "ok"
										},
										"info": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"error": {
											"type": "object",
											"example": {},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"details": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					},
					"503": {
						"description": "The Health Check is not successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"example": "error"
										},
										"info": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"error": {
											"type": "object",
											"example": {
												"redis": {
													"status": "down",
													"message": "Could not connect"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"details": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												},
												"redis": {
													"status": "down",
													"message": "Could not connect"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"tags": ["Health"]
			}
		},
		"/v2/smart-contract/{network}": {
			"get": {
				"operationId": "SmartContractGetAllForNetwork",
				"summary": "",
				"parameters": [
					{
						"name": "page",
						"required": false,
						"in": "query",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "limit",
						"required": false,
						"in": "query",
						"schema": {
							"maximum": 100,
							"type": "number"
						}
					},
					{
						"name": "address",
						"required": false,
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "includeAbi",
						"required": false,
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "includeCompilationDetails",
						"required": false,
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "network",
						"required": true,
						"in": "path",
						"schema": {
							"enum": [
								"ethereum-mainnet",
								"ethereum-ropsten",
								"ethereum-goerli",
								"binance-mainnet",
								"binance-testnet",
								"polygon-mainnet",
								"polygon-mumbai",
								"avalanche-fuji",
								"avalanche-mainnet"
							],
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"title": "PaginatedResponseOfSmartContractEntity",
									"allOf": [
										{
											"$ref": "#/components/schemas/Paginate"
										},
										{
											"properties": {
												"items": {
													"type": "array",
													"items": {
														"$ref": "#/components/schemas/SmartContractEntity"
													}
												}
											}
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Smart Contract"]
			}
		},
		"/v2/smart-contract": {
			"get": {
				"operationId": "SmartContractGetAll",
				"summary": "",
				"parameters": [
					{
						"name": "page",
						"required": false,
						"in": "query",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "limit",
						"required": false,
						"in": "query",
						"schema": {
							"maximum": 100,
							"type": "number"
						}
					},
					{
						"name": "network",
						"required": false,
						"in": "query",
						"schema": {
							"enum": [
								"ethereum-mainnet",
								"ethereum-ropsten",
								"ethereum-goerli",
								"binance-mainnet",
								"binance-testnet",
								"polygon-mainnet",
								"polygon-mumbai",
								"avalanche-fuji",
								"avalanche-mainnet"
							],
							"type": "string"
						}
					},
					{
						"name": "address",
						"required": false,
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "includeAbi",
						"required": false,
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "includeCompilationDetails",
						"required": false,
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"title": "PaginatedResponseOfSmartContractEntity",
									"allOf": [
										{
											"$ref": "#/components/schemas/Paginate"
										},
										{
											"properties": {
												"items": {
													"type": "array",
													"items": {
														"$ref": "#/components/schemas/SmartContractEntity"
													}
												}
											}
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Smart Contract"]
			}
		},
		"/v2/smart-contract/{network}/{address}": {
			"get": {
				"operationId": "SmartContractGetOne",
				"summary": "",
				"parameters": [
					{
						"name": "includeAbi",
						"required": false,
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "includeCompilationDetails",
						"required": false,
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "network",
						"required": true,
						"in": "path",
						"schema": {
							"enum": [
								"ethereum-mainnet",
								"ethereum-ropsten",
								"ethereum-goerli",
								"binance-mainnet",
								"binance-testnet",
								"polygon-mainnet",
								"polygon-mumbai",
								"avalanche-fuji",
								"avalanche-mainnet"
							],
							"type": "string"
						}
					},
					{
						"name": "address",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SmartContractEntity"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Smart Contract"]
			},
			"delete": {
				"operationId": "SmartContractDelete",
				"summary": "",
				"parameters": [
					{
						"name": "network",
						"required": true,
						"in": "path",
						"schema": {
							"enum": [
								"ethereum-mainnet",
								"ethereum-ropsten",
								"ethereum-goerli",
								"binance-mainnet",
								"binance-testnet",
								"polygon-mainnet",
								"polygon-mumbai",
								"avalanche-fuji",
								"avalanche-mainnet"
							],
							"type": "string"
						}
					},
					{
						"name": "address",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Smart Contract"]
			}
		},
		"/v2/smart-contract/from-bytecode": {
			"post": {
				"operationId": "SmartContractCreateFromBytecode",
				"summary": "",
				"parameters": [
					{
						"name": "simulate",
						"required": false,
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeployFromBytecodeDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DeploySmartContractResponse"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/INVALID_BYTECODE"
										},
										{
											"$ref": "#/components/schemas/INVALID_ABI"
										},
										{
											"$ref": "#/components/schemas/MISSING_ARGUMENT"
										},
										{
											"$ref": "#/components/schemas/UNEXPECTED_ARGUMENT"
										},
										{
											"$ref": "#/components/schemas/INVALID_ARGUMENT"
										},
										{
											"$ref": "#/components/schemas/ENS_NOT_SUPPORTED"
										},
										{
											"$ref": "#/components/schemas/EXECUTION_WILL_FAIL"
										},
										{
											"$ref": "#/components/schemas/INVALID_GAS_PRICE"
										},
										{
											"$ref": "#/components/schemas/INSUFFICIENT_FUNDS"
										},
										{
											"$ref": "#/components/schemas/ALREADY_KNOWN"
										},
										{
											"$ref": "#/components/schemas/NONCE_EXPIRED"
										},
										{
											"$ref": "#/components/schemas/UNPREDICTABLE_GAS_LIMIT"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/REPLACEMENT_UNDERPRICED"
										}
									]
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/UNKNOWN"
										},
										{
											"$ref": "#/components/schemas/NO_PROVIDER_FOR_NETWORK"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_ESTIMATE_GAS_PRICE"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_SIGN"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_ASSIGN_NONCE"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_BROADCAST"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Smart Contract"]
			}
		},
		"/v2/smart-contract/from-template": {
			"post": {
				"operationId": "SmartContractCreateFromTemplate",
				"summary": "",
				"parameters": [
					{
						"name": "simulate",
						"required": false,
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeployFromTemplateDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DeploySmartContractResponse"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/SMART_CONTRACT_NOT_ACTIVATED"
										},
										{
											"$ref": "#/components/schemas/INVALID_BYTECODE"
										},
										{
											"$ref": "#/components/schemas/INVALID_ABI"
										},
										{
											"$ref": "#/components/schemas/MISSING_ARGUMENT"
										},
										{
											"$ref": "#/components/schemas/UNEXPECTED_ARGUMENT"
										},
										{
											"$ref": "#/components/schemas/INVALID_ARGUMENT"
										},
										{
											"$ref": "#/components/schemas/ENS_NOT_SUPPORTED"
										},
										{
											"$ref": "#/components/schemas/EXECUTION_WILL_FAIL"
										},
										{
											"$ref": "#/components/schemas/INVALID_GAS_PRICE"
										},
										{
											"$ref": "#/components/schemas/INSUFFICIENT_FUNDS"
										},
										{
											"$ref": "#/components/schemas/ALREADY_KNOWN"
										},
										{
											"$ref": "#/components/schemas/NONCE_EXPIRED"
										},
										{
											"$ref": "#/components/schemas/UNPREDICTABLE_GAS_LIMIT"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/MICROSERVICE_NOT_RESPONDING"
										},
										{
											"$ref": "#/components/schemas/UNKNOWN"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_ESTIMATE_GAS_PRICE"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_BROADCAST"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_ASSIGN_NONCE"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_SIGN"
										},
										{
											"$ref": "#/components/schemas/NO_PROVIDER_FOR_NETWORK"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Smart Contract"]
			}
		},
		"/v2/smart-contract/{network}/{address}/call": {
			"post": {
				"operationId": "SmartContractCall",
				"summary": "",
				"parameters": [
					{
						"name": "network",
						"required": true,
						"in": "path",
						"schema": {
							"enum": [
								"ethereum-mainnet",
								"ethereum-ropsten",
								"ethereum-goerli",
								"binance-mainnet",
								"binance-testnet",
								"polygon-mainnet",
								"polygon-mumbai",
								"avalanche-fuji",
								"avalanche-mainnet"
							],
							"type": "string"
						}
					},
					{
						"name": "address",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "simulate",
						"required": false,
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CallDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionEntity"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/INVALID_BYTECODE"
										},
										{
											"$ref": "#/components/schemas/INVALID_ABI"
										},
										{
											"$ref": "#/components/schemas/INVALID_FUNCTION"
										},
										{
											"$ref": "#/components/schemas/MISSING_ARGUMENT"
										},
										{
											"$ref": "#/components/schemas/UNEXPECTED_ARGUMENT"
										},
										{
											"$ref": "#/components/schemas/INVALID_ARGUMENT"
										},
										{
											"$ref": "#/components/schemas/ENS_NOT_SUPPORTED"
										},
										{
											"$ref": "#/components/schemas/UNPREDICTABLE_GAS_LIMIT"
										},
										{
											"$ref": "#/components/schemas/EXECUTION_WILL_FAIL"
										},
										{
											"$ref": "#/components/schemas/INVALID_GAS_PRICE"
										},
										{
											"$ref": "#/components/schemas/INSUFFICIENT_FUNDS"
										},
										{
											"$ref": "#/components/schemas/ALREADY_KNOWN"
										},
										{
											"$ref": "#/components/schemas/NONCE_EXPIRED"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/REPLACEMENT_UNDERPRICED"
										}
									]
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/UNKNOWN"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_BROADCAST"
										},
										{
											"$ref": "#/components/schemas/NO_PROVIDER_FOR_NETWORK"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_ESTIMATE_GAS_PRICE"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_ASSIGN_NONCE"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_SIGN"
										},
										{
											"$ref": "#/components/schemas/UNKNOWN"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Smart Contract"]
			}
		},
		"/v2/smart-contract/{network}/{address}/read": {
			"post": {
				"operationId": "SmartContractRead",
				"summary": "",
				"parameters": [
					{
						"name": "network",
						"required": true,
						"in": "path",
						"schema": {
							"enum": [
								"ethereum-mainnet",
								"ethereum-ropsten",
								"ethereum-goerli",
								"binance-mainnet",
								"binance-testnet",
								"polygon-mainnet",
								"polygon-mumbai",
								"avalanche-fuji",
								"avalanche-mainnet"
							],
							"type": "string"
						}
					},
					{
						"name": "address",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ReadDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReadSmartContractResponse"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/INVALID_BYTECODE"
										},
										{
											"$ref": "#/components/schemas/INVALID_ABI"
										},
										{
											"$ref": "#/components/schemas/INVALID_FUNCTION"
										},
										{
											"$ref": "#/components/schemas/MISSING_ARGUMENT"
										},
										{
											"$ref": "#/components/schemas/UNEXPECTED_ARGUMENT"
										},
										{
											"$ref": "#/components/schemas/INVALID_ARGUMENT"
										},
										{
											"$ref": "#/components/schemas/ENS_NOT_SUPPORTED"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/UNKNOWN"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Smart Contract"]
			}
		},
		"/v2/smart-contract/{network}/{address}/available-functions": {
			"get": {
				"operationId": "SmartContractGetAvailableFunctions",
				"summary": "",
				"parameters": [
					{
						"name": "network",
						"required": true,
						"in": "path",
						"schema": {
							"enum": [
								"ethereum-mainnet",
								"ethereum-ropsten",
								"ethereum-goerli",
								"binance-mainnet",
								"binance-testnet",
								"polygon-mainnet",
								"polygon-mumbai",
								"avalanche-fuji",
								"avalanche-mainnet"
							],
							"type": "string"
						}
					},
					{
						"name": "address",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string"
									}
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/INVALID_BYTECODE"
										},
										{
											"$ref": "#/components/schemas/INVALID_ABI"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/UNKNOWN"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Smart Contract"]
			}
		},
		"/v2/smart-contract/import-existing": {
			"post": {
				"operationId": "SmartContractImportExisting",
				"summary": "",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ImportSmartContractDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SmartContractEntity"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/INVALID_CONTRACT_ADDRESS"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Smart Contract"]
			}
		},
		"/v2/transaction": {
			"get": {
				"operationId": "TransactionGetAll",
				"summary": "",
				"parameters": [
					{
						"name": "page",
						"required": false,
						"in": "query",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "limit",
						"required": false,
						"in": "query",
						"schema": {
							"maximum": 100,
							"type": "number"
						}
					},
					{
						"name": "address",
						"required": false,
						"in": "query",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "network",
						"required": false,
						"in": "query",
						"schema": {
							"enum": [
								"ethereum-mainnet",
								"ethereum-ropsten",
								"ethereum-goerli",
								"binance-mainnet",
								"binance-testnet",
								"polygon-mainnet",
								"polygon-mumbai",
								"avalanche-fuji",
								"avalanche-mainnet"
							],
							"type": "string"
						}
					},
					{
						"name": "transactionHash",
						"required": false,
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "to",
						"required": false,
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "from",
						"required": false,
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"title": "PaginatedResponseOfTransactionEntity",
									"allOf": [
										{
											"$ref": "#/components/schemas/Paginate"
										},
										{
											"properties": {
												"items": {
													"type": "array",
													"items": {
														"$ref": "#/components/schemas/TransactionEntity"
													}
												}
											}
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Transaction"]
			},
			"post": {
				"operationId": "TransactionCreate",
				"summary": "",
				"parameters": [
					{
						"name": "simulate",
						"required": false,
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTransactionDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionEntity"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/NONCE_EXPIRED"
										},
										{
											"$ref": "#/components/schemas/EXECUTION_WILL_FAIL"
										},
										{
											"$ref": "#/components/schemas/INVALID_GAS_PRICE"
										},
										{
											"$ref": "#/components/schemas/INSUFFICIENT_FUNDS"
										},
										{
											"$ref": "#/components/schemas/ALREADY_KNOWN"
										},
										{
											"$ref": "#/components/schemas/UNPREDICTABLE_GAS_LIMIT"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/REPLACEMENT_UNDERPRICED"
										}
									]
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_ASSIGN_NONCE"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_BROADCAST"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_ESTIMATE_GAS_PRICE"
										},
										{
											"$ref": "#/components/schemas/NO_PROVIDER_FOR_NETWORK"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_ASSIGN_NONCE"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_SIGN"
										},
										{
											"$ref": "#/components/schemas/UNKNOWN"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Transaction"]
			}
		},
		"/v2/transaction/{id}": {
			"get": {
				"operationId": "TransactionGetOne",
				"summary": "",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionEntity"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Transaction"]
			}
		},
		"/v2/wallet": {
			"get": {
				"operationId": "WalletGetAll",
				"summary": "",
				"parameters": [
					{
						"name": "page",
						"required": false,
						"in": "query",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "limit",
						"required": false,
						"in": "query",
						"schema": {
							"maximum": 100,
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"title": "PaginatedResponseOfWalletEntity",
									"allOf": [
										{
											"$ref": "#/components/schemas/Paginate"
										},
										{
											"properties": {
												"items": {
													"type": "array",
													"items": {
														"$ref": "#/components/schemas/WalletEntity"
													}
												}
											}
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Wallet"]
			},
			"post": {
				"operationId": "WalletCreate",
				"summary": "",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateWalletDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WalletEntity"
								}
							}
						}
					},
					"412": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/MAXIMUM_WALLET_REACHED"
										},
										{
											"$ref": "#/components/schemas/WALLET_ALREADY_EXIST"
										}
									]
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/INVALID_KMS_KEY_PERMISSION"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_CREATE_KMS_KEY"
										},
										{
											"$ref": "#/components/schemas/KMS_KEY_NOT_FOUND"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Wallet"]
			}
		},
		"/v2/wallet/{address}": {
			"get": {
				"operationId": "WalletGetOne",
				"summary": "",
				"parameters": [
					{
						"name": "address",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WalletEntity"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Wallet"]
			},
			"patch": {
				"operationId": "WalletUpdate",
				"summary": "",
				"parameters": [
					{
						"name": "address",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateWalletDto"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WalletEntity"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Wallet"]
			},
			"delete": {
				"operationId": "WalletDelete",
				"summary": "",
				"parameters": [
					{
						"name": "address",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "deleteKms",
						"required": false,
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_DELETE_KMS_KEY"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Wallet"]
			}
		},
		"/v2/wallet/{address}/sign-message": {
			"post": {
				"operationId": "WalletSignMessage",
				"summary": "",
				"parameters": [
					{
						"name": "address",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SignMessageDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_DECRYPT_KMS_CREDENTIALS"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Wallet"]
			}
		},
		"/v2/wallet/{address}/balance": {
			"get": {
				"operationId": "WalletGetBalance",
				"summary": "",
				"parameters": [
					{
						"name": "address",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/WalletBalance"
									}
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/READ_ERROR"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Wallet"]
			}
		},
		"/v2/wallet/{address}/{network}/balance": {
			"get": {
				"operationId": "WalletGetBalanceForNetwork",
				"summary": "",
				"parameters": [
					{
						"name": "network",
						"required": true,
						"in": "path",
						"schema": {
							"enum": [
								"ethereum-mainnet",
								"ethereum-ropsten",
								"ethereum-goerli",
								"binance-mainnet",
								"binance-testnet",
								"polygon-mainnet",
								"polygon-mumbai",
								"avalanche-fuji",
								"avalanche-mainnet"
							],
							"type": "string"
						}
					},
					{
						"name": "address",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WalletBalance"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/READ_ERROR"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Wallet"]
			}
		},
		"/v2/wallet/{address}/{network}/erc20-balance": {
			"get": {
				"operationId": "WalletGetErc20Balance",
				"summary": "",
				"parameters": [
					{
						"name": "network",
						"required": true,
						"in": "path",
						"schema": {
							"enum": [
								"ethereum-mainnet",
								"ethereum-ropsten",
								"ethereum-goerli",
								"binance-mainnet",
								"binance-testnet",
								"polygon-mainnet",
								"polygon-mumbai",
								"avalanche-fuji",
								"avalanche-mainnet"
							],
							"type": "string"
						}
					},
					{
						"name": "address",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contractAddress",
						"required": true,
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WalletBalance"
								}
							}
						}
					}
				},
				"tags": ["Wallet"]
			}
		},
		"/v2/gas-price/{network}": {
			"get": {
				"operationId": "GasPriceGetForNetwork",
				"summary": "",
				"parameters": [
					{
						"name": "network",
						"required": true,
						"in": "path",
						"schema": {
							"enum": [
								"ethereum-mainnet",
								"ethereum-ropsten",
								"ethereum-goerli",
								"binance-mainnet",
								"binance-testnet",
								"polygon-mainnet",
								"polygon-mumbai",
								"avalanche-fuji",
								"avalanche-mainnet"
							],
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GasPriceEntity"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Gas Price"]
			}
		},
		"/v2/project/{id}/setting/relayer/{network}": {
			"get": {
				"operationId": "RelayerSettingsGet",
				"summary": "",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "network",
						"required": true,
						"in": "path",
						"schema": {
							"enum": [
								"ethereum-mainnet",
								"ethereum-ropsten",
								"ethereum-goerli",
								"binance-mainnet",
								"binance-testnet",
								"polygon-mainnet",
								"polygon-mumbai",
								"avalanche-fuji",
								"avalanche-mainnet"
							],
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SettingRelayerEntity"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/UNAUTHORIZED"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Project"]
			},
			"patch": {
				"operationId": "RelayerSettingsUpdate",
				"summary": "",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "network",
						"required": true,
						"in": "path",
						"schema": {
							"enum": [
								"ethereum-mainnet",
								"ethereum-ropsten",
								"ethereum-goerli",
								"binance-mainnet",
								"binance-testnet",
								"polygon-mainnet",
								"polygon-mumbai",
								"avalanche-fuji",
								"avalanche-mainnet"
							],
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateSettingRelayerDto"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SettingRelayerEntity"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/UNAUTHORIZED"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Project"]
			}
		},
		"/v2/project/health": {
			"get": {
				"operationId": "ProjectHealthCheck",
				"summary": "",
				"parameters": [],
				"responses": {
					"200": {
						"description": "The Health Check is successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"example": "ok"
										},
										"info": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"error": {
											"type": "object",
											"example": {},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"details": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					},
					"503": {
						"description": "The Health Check is not successful",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"example": "error"
										},
										"info": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"error": {
											"type": "object",
											"example": {
												"redis": {
													"status": "down",
													"message": "Could not connect"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											},
											"nullable": true
										},
										"details": {
											"type": "object",
											"example": {
												"database": {
													"status": "up"
												},
												"redis": {
													"status": "down",
													"message": "Could not connect"
												}
											},
											"additionalProperties": {
												"type": "object",
												"properties": {
													"status": {
														"type": "string"
													}
												},
												"additionalProperties": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"tags": ["Health"]
			}
		},
		"/v2/user/{id}": {
			"get": {
				"operationId": "UserGetOne",
				"summary": "",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserEntity"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/UNAUTHORIZED"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["User"]
			},
			"patch": {
				"operationId": "UserUpdate",
				"summary": "",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateUserDto"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserEntity"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/UNAUTHORIZED"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["User"]
			}
		},
		"/v2/user": {
			"post": {
				"operationId": "UserCreate",
				"summary": "",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateUserDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserEntity"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/EMAIL_ALREADY_EXISTS"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["User"]
			}
		},
		"/v2/user/{id}/change-password": {
			"post": {
				"operationId": "UserPasswordUpdate",
				"summary": "",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChangeUserPasswordDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserEntity"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/WRONG_PASSWORD"
										}
									]
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/UNAUTHORIZED"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["User"]
			}
		},
		"/v2/user/reset-password": {
			"post": {
				"operationId": "UserPasswordReset",
				"summary": "",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ResetUserPasswordDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserEntity"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/INVALID_JWT_TOKEN"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/EMAIL_NOT_FOUND"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["User"]
			}
		},
		"/v2/user/request-reset-password": {
			"post": {
				"operationId": "UserPasswordRequestReset",
				"summary": "",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RequestResetUserPasswordDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/EMAIL_NOT_FOUND"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["User"]
			}
		},
		"/v2/user/verify-email": {
			"post": {
				"operationId": "UserEmailVerify",
				"summary": "",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserVerifyEmailDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserEntity"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/INVALID_JWT_TOKEN"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/EMAIL_NOT_FOUND"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["User"]
			}
		},
		"/v2/user/{id}/request-email-verification": {
			"post": {
				"operationId": "UserEmailRequestVerification",
				"summary": "",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/NOT_AUTHENTICATED"
										},
										{
											"$ref": "#/components/schemas/UNAUTHORIZED"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["User"]
			}
		},
		"/v2/user/login": {
			"post": {
				"operationId": "UserLogin",
				"summary": "",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/WRONG_PASSWORD"
										}
									]
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/USER_ACCOUNT_INACTIVE"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/EMAIL_NOT_FOUND"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["User"]
			}
		},
		"/v2/project/{projectId}/api-key": {
			"get": {
				"operationId": "ApiKeyGetAll",
				"summary": "",
				"parameters": [
					{
						"name": "page",
						"required": false,
						"in": "query",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "limit",
						"required": false,
						"in": "query",
						"schema": {
							"maximum": 100,
							"type": "number"
						}
					},
					{
						"name": "projectId",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ApiKey"
									}
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/NOT_AUTHENTICATED"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_GET_CONSUMER_PLUGIN"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_PERFORM_REQUEST"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Api Key"]
			},
			"post": {
				"operationId": "ApiKeyCreate",
				"summary": "",
				"parameters": [
					{
						"name": "projectId",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiKey"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_CREATE_CONSUMER_PLUGIN"
										},
										{
											"$ref": "#/components/schemas/COULD_NOT_PERFORM_REQUEST"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Api Key"]
			}
		},
		"/v2/project/{projectId}/api-key/{id}": {
			"delete": {
				"operationId": "ApiKeyDelete",
				"summary": "",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "projectId",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_PERFORM_REQUEST"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Api Key"]
			}
		},
		"/v2/project": {
			"get": {
				"operationId": "ProjectGetAll",
				"summary": "",
				"parameters": [
					{
						"name": "page",
						"required": false,
						"in": "query",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "limit",
						"required": false,
						"in": "query",
						"schema": {
							"maximum": 100,
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"title": "PaginatedResponseOfProjectEntity",
									"allOf": [
										{
											"$ref": "#/components/schemas/Paginate"
										},
										{
											"properties": {
												"items": {
													"type": "array",
													"items": {
														"$ref": "#/components/schemas/ProjectEntity"
													}
												}
											}
										}
									]
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/NOT_AUTHENTICATED"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Project"]
			},
			"post": {
				"operationId": "ProjectCreate",
				"summary": "",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateProjectDto"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProjectEntity"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/NOT_AUTHENTICATED"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Project"]
			}
		},
		"/v2/project/{id}": {
			"get": {
				"operationId": "ProjectGetOne",
				"summary": "",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProjectEntity"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/NOT_AUTHENTICATED"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Project"]
			},
			"delete": {
				"operationId": "ProjectDelete",
				"summary": "",
				"parameters": [
					{
						"name": "id",
						"required": true,
						"in": "path",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Project"]
			}
		}
	},
	"info": {
		"title": "Starton Connect: Project microservice",
		"description": "API description",
		"version": "1.0",
		"contact": {}
	},
	"tags": [
		{
			"name": "Health",
			"description": "Health"
		},
		{
			"name": "User",
			"description": "The list of users"
		},
		{
			"name": "Project",
			"description": "The list of project"
		},
		{
			"name": "Api Key",
			"description": "The list of api key"
		}
	],
	"servers": [],
	"components": {
		"securitySchemes": {
			"bearer": {
				"scheme": "bearer",
				"bearerFormat": "JWT",
				"type": "http",
				"name": "Authorization",
				"in": "header"
			}
		},
		"schemas": {
			"Pin": {
				"type": "object",
				"properties": {
					"cid": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"origins": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"meta": {
						"type": "object"
					}
				},
				"required": ["cid"]
			},
			"PinStatus": {
				"type": "object",
				"properties": {
					"requestid": {
						"type": "string"
					},
					"projectId": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"created": {
						"type": "string"
					},
					"pin": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Pin"
						}
					},
					"delegates": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"info": {
						"type": "object"
					}
				},
				"required": ["requestid", "projectId", "status", "created", "pin", "delegates"]
			},
			"PinResults": {
				"type": "object",
				"properties": {
					"count": {
						"type": "number"
					},
					"results": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/PinStatus"
						}
					}
				},
				"required": ["count", "results"]
			},
			"UNAUTHORIZED": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": 401
					},
					"errorCode": {
						"type": "string",
						"default": "UNAUTHORIZED"
					},
					"message": {
						"type": "string",
						"default": "Unauthorized."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"StoreContentRequestEntity": {
				"type": "object",
				"properties": {
					"requestid": {
						"type": "string"
					},
					"projectId": {
						"type": "string"
					},
					"status": {
						"enum": ["IN_PROGRESS", "COMPLETED", "FAILED"],
						"type": "string"
					},
					"pinStatus": {
						"$ref": "#/components/schemas/PinStatusEntity"
					},
					"created": {
						"type": "string"
					},
					"updated": {
						"type": "string"
					}
				},
				"required": ["requestid", "projectId", "status", "created", "updated"]
			},
			"PinStatusEntity": {
				"type": "object",
				"properties": {
					"requestid": {
						"type": "string"
					},
					"projectId": {
						"type": "string"
					},
					"status": {
						"enum": ["queued", "pinning", "pinned", "failed", "deleted"],
						"type": "string"
					},
					"pin": {
						"$ref": "#/components/schemas/PinEntity"
					},
					"delegates": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"info": {
						"type": "object"
					},
					"storeContentRequest": {
						"$ref": "#/components/schemas/StoreContentRequestEntity"
					},
					"created": {
						"type": "string"
					},
					"updated": {
						"type": "string"
					}
				},
				"required": ["requestid", "projectId", "status", "pin", "delegates", "created", "updated"]
			},
			"PinEntity": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"cid": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"origins": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"meta": {
						"type": "object"
					},
					"pinStatus": {
						"$ref": "#/components/schemas/PinStatusEntity"
					},
					"created": {
						"type": "string"
					},
					"updated": {
						"type": "string"
					}
				},
				"required": ["id", "pinStatus", "created", "updated"]
			},
			"MAXIMUM_STORAGE_REACHED": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "413"
					},
					"errorCode": {
						"type": "string",
						"default": "MAXIMUM_STORAGE_REACHED"
					},
					"message": {
						"type": "string",
						"default": "The max storage size allowed for this project would be exceeded."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"CreatePinDto": {
				"type": "object",
				"properties": {
					"cid": {
						"type": "string"
					},
					"name": {
						"type": "string",
						"maxLength": 255
					},
					"origins": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"meta": {
						"type": "object"
					}
				},
				"required": ["cid"]
			},
			"COULD_NOT_FIND_RESOURCE": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "404"
					},
					"errorCode": {
						"type": "string",
						"default": "COULD_NOT_FIND_RESOURCE"
					},
					"message": {
						"type": "string",
						"default": "Could not found resource."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"COULD_NOT_PROCESS_ENTITY": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": 422
					},
					"errorCode": {
						"type": "string",
						"default": "COULD_NOT_PROCESS_ENTITY"
					},
					"message": {
						"type": "string",
						"default": "Could not process entity."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"BAD_REQUEST_EXCEPTION": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": 400
					},
					"errorCode": {
						"type": "string",
						"default": "BAD_REQUEST_EXCEPTION"
					},
					"message": {
						"type": "string",
						"default": "Bad request."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"PAYLOAD_TOO_LARGE": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": 413
					},
					"errorCode": {
						"type": "string",
						"default": "PAYLOAD_TOO_LARGE"
					},
					"message": {
						"type": "string",
						"default": "Payload too large."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"CreateStoreFileRequestDto": {
				"type": "object",
				"properties": {
					"meta": {
						"type": "object"
					},
					"isSync": {
						"type": "boolean",
						"default": false
					}
				}
			},
			"CreateStoreFolderRequestDto": {
				"type": "object",
				"properties": {
					"meta": {
						"type": "object"
					},
					"jsons": {
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"folderName": {
						"type": "string"
					},
					"isSync": {
						"type": "boolean",
						"default": false
					}
				}
			},
			"CreateStoreJsonRequestDto": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"maxLength": 255
					},
					"content": {
						"type": "object"
					},
					"meta": {
						"type": "object"
					},
					"isSync": {
						"type": "boolean",
						"default": false
					}
				},
				"required": ["name", "content"]
			},
			"CreateStoreMultipleContentsRequestDto": {
				"type": "object",
				"properties": {
					"meta": {
						"type": "object"
					},
					"jsons": {
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"folderName": {
						"type": "string"
					},
					"isSync": {
						"type": "boolean",
						"default": false
					}
				}
			},
			"StoreContentRequest": {
				"type": "object",
				"properties": {
					"requestid": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"size": {
						"type": "number"
					}
				},
				"required": ["requestid", "status", "name", "size"]
			},
			"StoreContentRequestResults": {
				"type": "object",
				"properties": {
					"count": {
						"type": "number"
					},
					"results": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/StoreContentRequest"
						}
					}
				},
				"required": ["count", "results"]
			},
			"SmartContractEntity": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"network": {
						"enum": [
							"ethereum-mainnet",
							"ethereum-ropsten",
							"ethereum-goerli",
							"binance-mainnet",
							"binance-testnet",
							"polygon-mainnet",
							"polygon-mumbai",
							"avalanche-fuji",
							"avalanche-mainnet"
						],
						"type": "string"
					},
					"abi": {
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"projectId": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"params": {
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"compilationDetails": {
						"type": "object"
					},
					"creationHash": {
						"type": "string"
					},
					"status": {
						"enum": [
							"UNSIGNED",
							"ERROR_TX",
							"ERROR_PUBLISH",
							"PUBLISHED",
							"RECEIVED_BY_STARTON",
							"COULD_NOT_ESTIMATE_GAS_PRICE",
							"COULD_NOT_INCREASE_GAS_PRICE",
							"GAS_PRICE_ESTIMATED",
							"INVALID_GAS_PRICE",
							"REPLACEMENT_GAS_PRICE_UNDERPRICED",
							"COULD_NOT_ESTIMATE_GAS_LIMIT",
							"GAS_LIMIT_ESTIMATED",
							"EXECUTION_WILL_FAIL",
							"INVALID_ARGUMENT",
							"INSUFFICIENT_FUNDS",
							"COULD_NOT_ASSIGN_NONCE",
							"COULD_NOT_UNSTUCK_NONCE",
							"NONCE_ASSIGNED",
							"NONCE_EXPIRED",
							"COULD_NOT_SIGN",
							"SIGNED",
							"SENT_TO_MEMPOOL",
							"COULD_NOT_BROADCAST",
							"ALREADY_KNOWN",
							"MINED",
							"CONFIRMED",
							"REPLACED",
							"FAILED",
							"MONITORING_IN_PROGRESS",
							"MAX_GAS_PRICE_REACH",
							"GAS_PRICE_INCREASED",
							"NEW_TRANSACTION_HASH",
							"UNKNOWN"
						],
						"type": "string"
					},
					"minedDate": {
						"type": "string"
					},
					"blockNumber": {
						"type": "number"
					},
					"templateId": {
						"type": "string"
					},
					"createdAt": {
						"type": "string"
					},
					"updatedAt": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"network",
					"projectId",
					"address",
					"compilationDetails",
					"status",
					"createdAt",
					"updatedAt"
				]
			},
			"INVALID_BYTECODE": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "400"
					},
					"errorCode": {
						"type": "string",
						"default": "INVALID_BYTECODE"
					},
					"message": {
						"type": "string",
						"default": "Your bytecode is invalid."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"INVALID_ABI": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "400"
					},
					"errorCode": {
						"type": "string",
						"default": "INVALID_ABI"
					},
					"message": {
						"type": "string",
						"default": "INVALID_ABI"
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"MISSING_ARGUMENT": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "400"
					},
					"errorCode": {
						"type": "string",
						"default": "MISSING_ARGUMENT"
					},
					"message": {
						"type": "string",
						"default": "Some params are missing."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"UNEXPECTED_ARGUMENT": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "400"
					},
					"errorCode": {
						"type": "string",
						"default": "UNEXPECTED_ARGUMENT"
					},
					"message": {
						"type": "string",
						"default": "Your params are invalid."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"INVALID_ARGUMENT": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "400"
					},
					"errorCode": {
						"type": "string",
						"default": "INVALID_ARGUMENT"
					},
					"message": {
						"type": "string",
						"default": "Some params are invalid."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"ENS_NOT_SUPPORTED": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "400"
					},
					"errorCode": {
						"type": "string",
						"default": "ENS_NOT_SUPPORTED"
					},
					"message": {
						"type": "string",
						"default": "ENS is not supported on this network."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"UNKNOWN": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "500"
					},
					"errorCode": {
						"type": "string",
						"default": "UNKNOWN"
					},
					"message": {
						"type": "string",
						"default": "Unknown error."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"NO_PROVIDER_FOR_NETWORK": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": 500
					},
					"errorCode": {
						"type": "string",
						"default": "NO_PROVIDER_FOR_NETWORK"
					},
					"message": {
						"type": "string",
						"default": "No provider for network."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"COULD_NOT_ESTIMATE_GAS_PRICE": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "500"
					},
					"errorCode": {
						"type": "string",
						"default": "COULD_NOT_ESTIMATE_GAS_PRICE"
					},
					"message": {
						"type": "string",
						"default": "Could not estimate gas price."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"COULD_NOT_SIGN": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "500"
					},
					"errorCode": {
						"type": "string",
						"default": "COULD_NOT_SIGN"
					},
					"message": {
						"type": "string",
						"default": "Could not sign transaction."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"COULD_NOT_ASSIGN_NONCE": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "500"
					},
					"errorCode": {
						"type": "string",
						"default": "COULD_NOT_ASSIGN_NONCE"
					},
					"message": {
						"type": "string",
						"default": "Could not assign nonce."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"EXECUTION_WILL_FAIL": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "400"
					},
					"errorCode": {
						"type": "string",
						"default": "EXECUTION_WILL_FAIL"
					},
					"message": {
						"type": "string",
						"default": "This call will revert."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"REPLACEMENT_UNDERPRICED": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "422"
					},
					"errorCode": {
						"type": "string",
						"default": "REPLACEMENT_UNDERPRICED"
					},
					"message": {
						"type": "string",
						"default": "Your transaction is underpriced. You try to replace an existing transaction with not enough gas fee."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"INVALID_GAS_PRICE": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "400"
					},
					"errorCode": {
						"type": "string",
						"default": "INVALID_GAS_PRICE"
					},
					"message": {
						"type": "string",
						"default": "Wrong gas price."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"INSUFFICIENT_FUNDS": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "400"
					},
					"errorCode": {
						"type": "string",
						"default": "INSUFFICIENT_FUNDS"
					},
					"message": {
						"type": "string",
						"default": "Your funds are insufficient."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"ALREADY_KNOWN": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "400"
					},
					"errorCode": {
						"type": "string",
						"default": "ALREADY_KNOWN"
					},
					"message": {
						"type": "string",
						"default": "This transaction is already known by the node."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"NONCE_EXPIRED": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "400"
					},
					"errorCode": {
						"type": "string",
						"default": "NONCE_EXPIRED"
					},
					"message": {
						"type": "string",
						"default": "Your nonce is too low."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"COULD_NOT_BROADCAST": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "500"
					},
					"errorCode": {
						"type": "string",
						"default": "COULD_NOT_BROADCAST"
					},
					"message": {
						"type": "string",
						"default": "Could not broadcast this transaction."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"UNPREDICTABLE_GAS_LIMIT": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "400"
					},
					"errorCode": {
						"type": "string",
						"default": "UNPREDICTABLE_GAS_LIMIT"
					},
					"message": {
						"type": "string",
						"default": "Could not estimate gas limit for this transaction."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"AbiInputDto": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"internalType": {
						"type": "string"
					},
					"indexed": {
						"type": "boolean"
					},
					"components": {
						"type": "object"
					}
				},
				"required": ["name", "type"]
			},
			"AbiOutputDto": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"internalType": {
						"type": "string"
					}
				},
				"required": ["name", "type"]
			},
			"AbiObjectDto": {
				"type": "object",
				"properties": {
					"type": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"stateMutability": {
						"type": "string"
					},
					"payability": {
						"type": "boolean"
					},
					"constant": {
						"type": "boolean"
					},
					"anonymous": {
						"type": "boolean"
					},
					"inputs": {
						"$ref": "#/components/schemas/AbiInputDto"
					},
					"outputs": {
						"$ref": "#/components/schemas/AbiOutputDto"
					}
				},
				"required": ["type"]
			},
			"CustomGasDto": {
				"type": "object",
				"properties": {
					"gasPrice": {
						"type": "string"
					},
					"maxFeePerGas": {
						"type": "string"
					},
					"maxPriorityFeePerGas": {
						"type": "string"
					}
				}
			},
			"DeployFromBytecodeDto": {
				"type": "object",
				"properties": {
					"abi": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/AbiObjectDto"
						}
					},
					"params": {
						"default": [],
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"speed": {
						"type": "string",
						"enum": ["low", "average", "fast", "fastest", "custom"]
					},
					"customGas": {
						"$ref": "#/components/schemas/CustomGasDto"
					},
					"gasLimit": {
						"type": "string"
					},
					"network": {
						"type": "string",
						"enum": [
							"ethereum-mainnet",
							"ethereum-ropsten",
							"ethereum-goerli",
							"binance-mainnet",
							"binance-testnet",
							"polygon-mainnet",
							"polygon-mumbai",
							"avalanche-fuji",
							"avalanche-mainnet"
						]
					},
					"bytecode": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"name": {
						"type": "string",
						"maxLength": 255
					},
					"signerWallet": {
						"type": "string"
					},
					"nonce": {
						"type": "number"
					},
					"value": {
						"type": "string"
					}
				},
				"required": ["abi", "params", "network", "bytecode", "name", "signerWallet"]
			},
			"TransactionLog": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"UNSIGNED",
							"ERROR_TX",
							"ERROR_PUBLISH",
							"PUBLISHED",
							"RECEIVED_BY_STARTON",
							"COULD_NOT_ESTIMATE_GAS_PRICE",
							"COULD_NOT_INCREASE_GAS_PRICE",
							"GAS_PRICE_ESTIMATED",
							"INVALID_GAS_PRICE",
							"REPLACEMENT_GAS_PRICE_UNDERPRICED",
							"COULD_NOT_ESTIMATE_GAS_LIMIT",
							"GAS_LIMIT_ESTIMATED",
							"EXECUTION_WILL_FAIL",
							"INVALID_ARGUMENT",
							"INSUFFICIENT_FUNDS",
							"COULD_NOT_ASSIGN_NONCE",
							"COULD_NOT_UNSTUCK_NONCE",
							"NONCE_ASSIGNED",
							"NONCE_EXPIRED",
							"COULD_NOT_SIGN",
							"SIGNED",
							"SENT_TO_MEMPOOL",
							"COULD_NOT_BROADCAST",
							"ALREADY_KNOWN",
							"MINED",
							"CONFIRMED",
							"REPLACED",
							"FAILED",
							"MONITORING_IN_PROGRESS",
							"MAX_GAS_PRICE_REACH",
							"GAS_PRICE_INCREASED",
							"NEW_TRANSACTION_HASH",
							"UNKNOWN"
						]
					},
					"context": {
						"type": "object"
					},
					"createdAt": {
						"type": "string"
					}
				},
				"required": ["message", "type", "createdAt"]
			},
			"TransactionEntity": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"blockHash": {
						"type": "string"
					},
					"blockNumber": {
						"type": "number"
					},
					"chainId": {
						"type": "number"
					},
					"data": {
						"type": "string"
					},
					"from": {
						"type": "string"
					},
					"gasLimit": {
						"type": "string"
					},
					"gasPrice": {
						"type": "string"
					},
					"maxFeePerGas": {
						"type": "string"
					},
					"maxPriorityFeePerGas": {
						"type": "string"
					},
					"metadata": {
						"type": "string"
					},
					"network": {
						"enum": [
							"ethereum-mainnet",
							"ethereum-ropsten",
							"ethereum-goerli",
							"binance-mainnet",
							"binance-testnet",
							"polygon-mainnet",
							"polygon-mumbai",
							"avalanche-fuji",
							"avalanche-mainnet"
						],
						"type": "string"
					},
					"nonce": {
						"type": "number"
					},
					"type": {
						"type": "number"
					},
					"signerWallet": {
						"type": "string"
					},
					"publishedDate": {
						"type": "string"
					},
					"signedDate": {
						"type": "string"
					},
					"minedDate": {
						"type": "string"
					},
					"signedTransaction": {
						"type": "string"
					},
					"status": {
						"enum": [
							"UNSIGNED",
							"ERROR_TX",
							"ERROR_PUBLISH",
							"PUBLISHED",
							"RECEIVED_BY_STARTON",
							"COULD_NOT_ESTIMATE_GAS_PRICE",
							"COULD_NOT_INCREASE_GAS_PRICE",
							"GAS_PRICE_ESTIMATED",
							"INVALID_GAS_PRICE",
							"REPLACEMENT_GAS_PRICE_UNDERPRICED",
							"COULD_NOT_ESTIMATE_GAS_LIMIT",
							"GAS_LIMIT_ESTIMATED",
							"EXECUTION_WILL_FAIL",
							"INVALID_ARGUMENT",
							"INSUFFICIENT_FUNDS",
							"COULD_NOT_ASSIGN_NONCE",
							"COULD_NOT_UNSTUCK_NONCE",
							"NONCE_ASSIGNED",
							"NONCE_EXPIRED",
							"COULD_NOT_SIGN",
							"SIGNED",
							"SENT_TO_MEMPOOL",
							"COULD_NOT_BROADCAST",
							"ALREADY_KNOWN",
							"MINED",
							"CONFIRMED",
							"REPLACED",
							"FAILED",
							"MONITORING_IN_PROGRESS",
							"MAX_GAS_PRICE_REACH",
							"GAS_PRICE_INCREASED",
							"NEW_TRANSACTION_HASH",
							"UNKNOWN"
						],
						"type": "string"
					},
					"state": {
						"enum": ["SUCCESS", "PENDING", "MANUAL_ACTION_REQUIRED", "ERROR"],
						"type": "string"
					},
					"speed": {
						"enum": ["low", "average", "fast", "fastest", "custom"],
						"type": "string"
					},
					"logs": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/TransactionLog"
						}
					},
					"to": {
						"type": "string"
					},
					"transactionHash": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"automaticNonce": {
						"type": "boolean"
					},
					"projectId": {
						"type": "string"
					},
					"createdAt": {
						"type": "string"
					},
					"updatedAt": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"chainId",
					"network",
					"signerWallet",
					"status",
					"state",
					"logs",
					"value",
					"automaticNonce",
					"projectId",
					"createdAt",
					"updatedAt"
				]
			},
			"DeploySmartContractResponse": {
				"type": "object",
				"properties": {
					"smartContract": {
						"$ref": "#/components/schemas/SmartContractEntity"
					},
					"transaction": {
						"$ref": "#/components/schemas/TransactionEntity"
					}
				},
				"required": ["smartContract", "transaction"]
			},
			"MICROSERVICE_NOT_RESPONDING": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": 500
					},
					"errorCode": {
						"type": "string",
						"default": "MICROSERVICE_NOT_RESPONDING"
					},
					"message": {
						"type": "string",
						"default": "MICROSERVICE_NOT_RESPONDING"
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"SMART_CONTRACT_NOT_ACTIVATED": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "400"
					},
					"errorCode": {
						"type": "string",
						"default": "SMART_CONTRACT_NOT_ACTIVATED"
					},
					"message": {
						"type": "string",
						"default": "This smart contract is not active."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"DeployFromTemplateDto": {
				"type": "object",
				"properties": {
					"network": {
						"type": "string",
						"enum": [
							"ethereum-mainnet",
							"ethereum-ropsten",
							"ethereum-goerli",
							"binance-mainnet",
							"binance-testnet",
							"polygon-mainnet",
							"polygon-mumbai",
							"avalanche-fuji",
							"avalanche-mainnet"
						]
					},
					"signerWallet": {
						"type": "string"
					},
					"templateId": {
						"type": "string"
					},
					"name": {
						"type": "string",
						"maxLength": 255
					},
					"description": {
						"type": "string"
					},
					"params": {
						"default": [],
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"gasLimit": {
						"type": "string"
					},
					"speed": {
						"type": "string",
						"enum": ["low", "average", "fast", "fastest", "custom"]
					},
					"customGas": {
						"$ref": "#/components/schemas/CustomGasDto"
					},
					"nonce": {
						"type": "number"
					},
					"value": {
						"type": "string"
					}
				},
				"required": ["network", "signerWallet", "templateId", "name", "params"]
			},
			"INVALID_FUNCTION": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "400"
					},
					"errorCode": {
						"type": "string",
						"default": "INVALID_FUNCTION"
					},
					"message": {
						"type": "string",
						"default": "Some params are invalid."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"CallDto": {
				"type": "object",
				"properties": {
					"functionName": {
						"type": "string"
					},
					"params": {
						"default": [],
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"speed": {
						"type": "string",
						"enum": ["low", "average", "fast", "fastest", "custom"]
					},
					"customGas": {
						"$ref": "#/components/schemas/CustomGasDto"
					},
					"gasLimit": {
						"type": "string"
					},
					"signerWallet": {
						"type": "string"
					},
					"nonce": {
						"type": "number"
					},
					"value": {
						"type": "string"
					}
				},
				"required": ["functionName", "params", "signerWallet"]
			},
			"ReadDto": {
				"type": "object",
				"properties": {
					"functionName": {
						"type": "string"
					},
					"params": {
						"default": [],
						"type": "array",
						"items": {
							"type": "object"
						}
					}
				},
				"required": ["functionName", "params"]
			},
			"ReadSmartContractResponse": {
				"type": "object",
				"properties": {
					"response": {
						"type": "string"
					},
					"functionName": {
						"type": "string"
					},
					"params": {
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"address": {
						"type": "string"
					},
					"network": {
						"type": "string",
						"enum": [
							"ethereum-mainnet",
							"ethereum-ropsten",
							"ethereum-goerli",
							"binance-mainnet",
							"binance-testnet",
							"polygon-mainnet",
							"polygon-mumbai",
							"avalanche-fuji",
							"avalanche-mainnet"
						]
					}
				},
				"required": ["response", "functionName", "params", "address", "network"]
			},
			"INVALID_CONTRACT_ADDRESS": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "400"
					},
					"errorCode": {
						"type": "string",
						"default": "INVALID_CONTRACT_ADDRESS"
					},
					"message": {
						"type": "string",
						"default": "This address doesn't refer to a smart-contract on this network."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"ImportSmartContractDto": {
				"type": "object",
				"properties": {
					"abi": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/AbiObjectDto"
						}
					},
					"network": {
						"type": "string",
						"enum": [
							"ethereum-mainnet",
							"ethereum-ropsten",
							"ethereum-goerli",
							"binance-mainnet",
							"binance-testnet",
							"polygon-mainnet",
							"polygon-mumbai",
							"avalanche-fuji",
							"avalanche-mainnet"
						]
					},
					"description": {
						"type": "string"
					},
					"name": {
						"type": "string",
						"maxLength": 255
					},
					"address": {
						"type": "string"
					}
				},
				"required": ["abi", "network", "name", "address"]
			},
			"CreateTransactionDto": {
				"type": "object",
				"properties": {
					"data": {
						"type": "string"
					},
					"gasLimit": {
						"type": "string"
					},
					"speed": {
						"type": "string",
						"enum": ["low", "average", "fast", "fastest", "custom"]
					},
					"customGas": {
						"$ref": "#/components/schemas/CustomGasDto"
					},
					"metadata": {
						"type": "string"
					},
					"network": {
						"type": "string",
						"enum": [
							"ethereum-mainnet",
							"ethereum-ropsten",
							"ethereum-goerli",
							"binance-mainnet",
							"binance-testnet",
							"polygon-mainnet",
							"polygon-mumbai",
							"avalanche-fuji",
							"avalanche-mainnet"
						]
					},
					"nonce": {
						"type": "number"
					},
					"signerWallet": {
						"type": "string"
					},
					"to": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				},
				"required": ["network", "signerWallet"]
			},
			"WalletEntity": {
				"type": "object",
				"properties": {
					"address": {
						"type": "string"
					},
					"credentials": {
						"type": "object"
					},
					"projectId": {
						"type": "string"
					},
					"networks": {
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"description": {
						"type": "string"
					},
					"metadata": {
						"type": "string"
					},
					"external": {
						"type": "boolean"
					},
					"createdAt": {
						"type": "string"
					},
					"updatedAt": {
						"type": "string"
					}
				},
				"required": [
					"address",
					"credentials",
					"projectId",
					"networks",
					"description",
					"metadata",
					"external",
					"createdAt",
					"updatedAt"
				]
			},
			"COULD_NOT_DECRYPT_KMS_CREDENTIALS": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "500"
					},
					"errorCode": {
						"type": "string",
						"default": "COULD_NOT_DECRYPT_KMS_CREDENTIALS"
					},
					"message": {
						"type": "string",
						"default": "Could not decrypt key."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"SignMessageDto": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string"
					}
				},
				"required": ["message"]
			},
			"READ_ERROR": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "500"
					},
					"errorCode": {
						"type": "string",
						"default": "READ_ERROR"
					},
					"message": {
						"type": "string",
						"default": "Could not read data."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"WalletBalance": {
				"type": "object",
				"properties": {
					"network": {
						"enum": [
							"ethereum-mainnet",
							"ethereum-ropsten",
							"ethereum-goerli",
							"binance-mainnet",
							"binance-testnet",
							"polygon-mainnet",
							"polygon-mumbai",
							"avalanche-fuji",
							"avalanche-mainnet"
						],
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"currencySymbol": {
						"type": "string"
					},
					"balance": {
						"type": "object",
						"properties": {
							"raw": {
								"required": true,
								"type": "string"
							},
							"formatted": {
								"required": true,
								"type": "string"
							},
							"hex": {
								"required": true,
								"type": "string"
							},
							"decimal": {
								"required": true,
								"type": "number"
							}
						}
					}
				},
				"required": ["network", "address", "currencySymbol", "balance"]
			},
			"MAXIMUM_WALLET_REACHED": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "412"
					},
					"errorCode": {
						"type": "string",
						"default": "MAXIMUM_WALLET_REACHED"
					},
					"message": {
						"type": "string",
						"default": "You can't create more than 1 address without your own KMS. You must specify AWS credentials to create more."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"INVALID_KMS_KEY_PERMISSION": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "500"
					},
					"errorCode": {
						"type": "string",
						"default": "INVALID_KMS_KEY_PERMISSION"
					},
					"message": {
						"type": "string",
						"default": "Could not access KMS key."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"COULD_NOT_CREATE_KMS_KEY": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "500"
					},
					"errorCode": {
						"type": "string",
						"default": "COULD_NOT_CREATE_KMS_KEY"
					},
					"message": {
						"type": "string",
						"default": "Could not create the key on the KMS."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"KMS_KEY_NOT_FOUND": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "500"
					},
					"errorCode": {
						"type": "string",
						"default": "KMS_KEY_NOT_FOUND"
					},
					"message": {
						"type": "string",
						"default": "Could not found the key on the KMS."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"WALLET_ALREADY_EXIST": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "412"
					},
					"errorCode": {
						"type": "string",
						"default": "WALLET_ALREADY_EXIST"
					},
					"message": {
						"type": "string",
						"default": "This wallet is already imported inside starton api."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"AwsKmsCredentialsDto": {
				"type": "object",
				"properties": {
					"arn": {
						"type": "string"
					},
					"keyId": {
						"type": "string"
					},
					"accountId": {
						"type": "string"
					},
					"accessKeyId": {
						"type": "string"
					},
					"secretAccessKey": {
						"type": "string"
					},
					"region": {
						"type": "string"
					}
				}
			},
			"CreateWalletDto": {
				"type": "object",
				"properties": {
					"description": {
						"type": "string"
					},
					"metadata": {
						"type": "string"
					},
					"credentials": {
						"$ref": "#/components/schemas/AwsKmsCredentialsDto"
					}
				}
			},
			"UpdateWalletDto": {
				"type": "object",
				"properties": {
					"description": {
						"type": "string"
					},
					"metadata": {
						"type": "string"
					}
				}
			},
			"COULD_NOT_DELETE_KMS_KEY": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "500"
					},
					"errorCode": {
						"type": "string",
						"default": "COULD_NOT_DELETE_KMS_KEY"
					},
					"message": {
						"type": "string",
						"default": "COULD_NOT_DELETE_KMS_KEY"
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"GasPriceEntity": {
				"type": "object",
				"properties": {
					"network": {
						"type": "string",
						"enum": [
							"ethereum-mainnet",
							"ethereum-ropsten",
							"ethereum-goerli",
							"binance-mainnet",
							"binance-testnet",
							"polygon-mainnet",
							"polygon-mumbai",
							"avalanche-fuji",
							"avalanche-mainnet"
						]
					},
					"low": {
						"type": "object"
					},
					"average": {
						"type": "object"
					},
					"fast": {
						"type": "object"
					},
					"fastest": {
						"type": "object"
					},
					"createdAt": {
						"type": "string"
					},
					"updatedAt": {
						"type": "string"
					}
				},
				"required": ["network", "low", "average", "fast", "fastest", "createdAt", "updatedAt"]
			},
			"SettingRelayerEntity": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"projectId": {
						"type": "string"
					},
					"network": {
						"enum": [
							"ethereum-mainnet",
							"ethereum-ropsten",
							"ethereum-goerli",
							"binance-mainnet",
							"binance-testnet",
							"polygon-mainnet",
							"polygon-mumbai",
							"avalanche-fuji",
							"avalanche-mainnet"
						],
						"type": "string"
					},
					"unstuckMaxGasPrice": {
						"type": "object"
					},
					"unstuckMissingNonce": {
						"type": "boolean"
					},
					"unstuckMissingNonceDelay": {
						"type": "number"
					},
					"unstuckCustomGasPrice": {
						"type": "boolean"
					},
					"unstuckAutomaticGasPrice": {
						"type": "boolean"
					},
					"unstuckGasPriceDelay": {
						"type": "number"
					},
					"unstuckConcurrency": {
						"type": "number"
					},
					"createdAt": {
						"type": "string"
					},
					"updatedAt": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"projectId",
					"network",
					"unstuckMaxGasPrice",
					"unstuckMissingNonce",
					"unstuckMissingNonceDelay",
					"unstuckCustomGasPrice",
					"unstuckAutomaticGasPrice",
					"unstuckGasPriceDelay",
					"unstuckConcurrency",
					"createdAt",
					"updatedAt"
				]
			},
			"UnstuckMaxGasPriceDto": {
				"type": "object",
				"properties": {
					"gasPrice": {
						"type": "string"
					},
					"maxFeePerGas": {
						"type": "string"
					},
					"maxPriorityFeePerGas": {
						"type": "string"
					}
				},
				"required": ["gasPrice", "maxFeePerGas", "maxPriorityFeePerGas"]
			},
			"UpdateSettingRelayerDto": {
				"type": "object",
				"properties": {
					"unstuckMaxGasPrice": {
						"$ref": "#/components/schemas/UnstuckMaxGasPriceDto"
					},
					"unstuckMissingNonce": {
						"type": "boolean"
					},
					"unstuckMissingNonceDelay": {
						"type": "number",
						"minimum": 10,
						"maximum": 3600
					},
					"unstuckCustomGasPrice": {
						"type": "boolean"
					},
					"unstuckAutomaticGasPrice": {
						"type": "boolean"
					},
					"unstuckGasPriceDelay": {
						"type": "number",
						"minimum": 10,
						"maximum": 3600
					},
					"unstuckConcurrency": {
						"type": "number",
						"minimum": 1,
						"maximum": 100
					}
				}
			},
			"PaginationData": {
				"type": "object",
				"properties": {
					"itemCount": {
						"type": "number"
					},
					"totalItems": {
						"type": "number"
					},
					"itemsPerPage": {
						"type": "number"
					},
					"totalPages": {
						"type": "number"
					},
					"currentPage": {
						"type": "number"
					}
				},
				"required": ["itemCount", "itemsPerPage", "currentPage"]
			},
			"Paginate": {
				"type": "object",
				"properties": {
					"meta": {
						"$ref": "#/components/schemas/PaginationData"
					}
				},
				"required": ["meta"]
			},
			"ProjectEntity": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"subscriptionPlan": {
						"enum": ["FREE", "TIER_1", "ENTERPRISE"],
						"type": "string"
					},
					"owner": {
						"$ref": "#/components/schemas/UserEntity"
					},
					"ownerId": {
						"type": "string"
					},
					"createdAt": {
						"type": "string"
					},
					"updatedAt": {
						"type": "string"
					}
				},
				"required": ["id", "name", "email", "subscriptionPlan", "owner", "ownerId", "createdAt", "updatedAt"]
			},
			"UserEntity": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"language": {
						"enum": ["FR", "EN"],
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"emailVerified": {
						"type": "boolean"
					},
					"profile": {
						"$ref": "#/components/schemas/UserProfileEntity"
					},
					"status": {
						"enum": ["NOT_VERIFIED", "VERIFIED", "INACTIVE", "ACTIVE"],
						"type": "string"
					},
					"projects": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ProjectEntity"
						}
					},
					"subscriptionPlan": {
						"enum": ["FREE", "TIER_1", "ENTERPRISE"],
						"type": "string"
					},
					"createdAt": {
						"type": "string"
					},
					"updatedAt": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"email",
					"language",
					"password",
					"emailVerified",
					"profile",
					"status",
					"projects",
					"subscriptionPlan",
					"createdAt",
					"updatedAt"
				]
			},
			"UserProfileEntity": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"role": {
						"type": "string"
					},
					"blockchainSkill": {
						"type": "string"
					},
					"sector": {
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/UserEntity"
					},
					"createdAt": {
						"type": "string"
					},
					"updatedAt": {
						"type": "string"
					}
				},
				"required": ["id", "firstName", "lastName", "user", "createdAt", "updatedAt"]
			},
			"UpdateUserProfileDto": {
				"type": "object",
				"properties": {
					"firstName": {
						"type": "string",
						"maxLength": 255
					},
					"lastName": {
						"type": "string",
						"maxLength": 255
					},
					"phone": {
						"type": "string"
					},
					"blockchainSkill": {
						"type": "string",
						"maxLength": 255
					},
					"role": {
						"type": "string",
						"maxLength": 255
					},
					"sector": {
						"type": "string",
						"maxLength": 255
					}
				}
			},
			"UpdateUserDto": {
				"type": "object",
				"properties": {
					"profile": {
						"$ref": "#/components/schemas/UpdateUserProfileDto"
					},
					"email": {
						"type": "string"
					},
					"language": {
						"type": "string",
						"enum": ["FR", "EN"]
					}
				}
			},
			"EMAIL_ALREADY_EXISTS": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "400"
					},
					"errorCode": {
						"type": "string",
						"default": "EMAIL_ALREADY_EXISTS"
					},
					"message": {
						"type": "string",
						"default": "A user with this email already exists."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"CreateUserProfileDto": {
				"type": "object",
				"properties": {
					"firstName": {
						"type": "string",
						"maxLength": 255
					},
					"lastName": {
						"type": "string",
						"maxLength": 255
					},
					"phone": {
						"type": "string"
					},
					"blockchainSkill": {
						"type": "string",
						"maxLength": 255
					},
					"role": {
						"type": "string",
						"maxLength": 255
					},
					"sector": {
						"type": "string",
						"maxLength": 255
					}
				},
				"required": ["firstName", "lastName"]
			},
			"CreateUserDto": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"profile": {
						"$ref": "#/components/schemas/CreateUserProfileDto"
					},
					"language": {
						"type": "string",
						"enum": ["FR", "EN"]
					}
				},
				"required": ["email", "password", "profile"]
			},
			"WRONG_PASSWORD": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "400"
					},
					"errorCode": {
						"type": "string",
						"default": "WRONG_PASSWORD"
					},
					"message": {
						"type": "string",
						"default": "Incorrect password."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"ChangeUserPasswordDto": {
				"type": "object",
				"properties": {
					"newPassword": {
						"type": "string"
					},
					"oldPassword": {
						"type": "string"
					}
				},
				"required": ["newPassword", "oldPassword"]
			},
			"INVALID_JWT_TOKEN": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": 401
					},
					"errorCode": {
						"type": "string",
						"default": "INVALID_JWT_TOKEN"
					},
					"message": {
						"type": "string",
						"default": "Invalid token."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"EMAIL_NOT_FOUND": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "404"
					},
					"errorCode": {
						"type": "string",
						"default": "EMAIL_NOT_FOUND"
					},
					"message": {
						"type": "string",
						"default": "A user with this email was not found."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"ResetUserPasswordDto": {
				"type": "object",
				"properties": {
					"token": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": ["token", "password"]
			},
			"RequestResetUserPasswordDto": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string"
					}
				},
				"required": ["email"]
			},
			"UserVerifyEmailDto": {
				"type": "object",
				"properties": {
					"token": {
						"type": "string"
					}
				},
				"required": ["token"]
			},
			"NOT_AUTHENTICATED": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": "401"
					},
					"errorCode": {
						"type": "string",
						"default": "NOT_AUTHENTICATED"
					},
					"message": {
						"type": "string",
						"default": "Not authenticated."
					}
				},
				"required": ["statusCode", "errorCode", "message"]
			},
			"USER_ACCOUNT_INACTIVE": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": 403
					},
					"errorCode": {
						"type": "string",
						"default": "USER_ACCOUNT_INACTIVE"
					},
					"message": {
						"type": "string",
						"default": "Your account is not active."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"LoginDto": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": ["email", "password"]
			},
			"COULD_NOT_GET_CONSUMER_PLUGIN": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": 500
					},
					"errorCode": {
						"type": "string",
						"default": "COULD_NOT_GET_CONSUMER_PLUGIN"
					},
					"message": {
						"type": "string",
						"default": "Could not get consumer plugin."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"COULD_NOT_PERFORM_REQUEST": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": 500
					},
					"errorCode": {
						"type": "string",
						"default": "COULD_NOT_PERFORM_REQUEST"
					},
					"message": {
						"type": "string",
						"default": "Unexpected error occurred performing the request."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"ApiKey": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"created_at": {
						"type": "string"
					},
					"key": {
						"type": "string"
					},
					"consumer": {
						"type": "object",
						"properties": {
							"id": {
								"required": true,
								"type": "string"
							}
						}
					}
				},
				"required": ["id", "created_at", "key", "consumer"]
			},
			"COULD_NOT_CREATE_CONSUMER_PLUGIN": {
				"type": "object",
				"properties": {
					"statusCode": {
						"type": "number",
						"default": 500
					},
					"errorCode": {
						"type": "string",
						"default": "COULD_NOT_CREATE_CONSUMER_PLUGIN"
					},
					"message": {
						"type": "string",
						"default": "Could not create consumer plugin."
					},
					"timestamp": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"context": {
						"type": "object"
					}
				},
				"required": ["statusCode", "errorCode", "message", "timestamp", "path"]
			},
			"CreateProjectDto": {
				"type": "object",
				"properties": {
					"description": {
						"type": "string"
					},
					"name": {
						"type": "string",
						"maxLength": 255
					},
					"email": {
						"type": "string"
					}
				},
				"required": ["name"]
			}
		}
	}
}
