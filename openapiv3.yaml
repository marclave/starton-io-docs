---
openapi: 3.0.0
paths:
  "/v3/ipfs/pin":
    get:
      operationId: PinGetAll
      summary: 'Gets all files pinned on Starton IPFS'
      parameters:
      - name: cid
        description: Unique content identifier
        required: false
        in: query
        schema:
          type: string
      - name: name
        description: Name of the files
        required: false
        in: query
        schema:
          pattern: "^[\\w\\-\\s]+$"
          type: string
      - name: status
        description: Status of the pin
        required: false
        in: query
        schema:
          enum:
          - queued
          - pinning
          - pinned
          - failed
          - deleted
          type: string
      - name: includeDirectoryContent
        description: informs whether or not content of the directory is included
        required: false
        in: query
        schema:
          type: boolean
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                title: PaginatedResponseOfPin
                allOf:
                - "$ref": "#/components/schemas/Paginate"
                - properties:
                    items:
                      type: array
                      items:
                        "$ref": "#/components/schemas/Pin"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Ipfs
    post:
      operationId: PinCreate
      summary: 'Pins a file already uploaded on IPFS'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreatePinDto"
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Pin"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Ipfs
  "/v3/ipfs/pin/{id}":
    get:
      operationId: PinGetOne
      summary: 'Gets the file pinned identified by {id}'
      parameters:
      - name: id
        description: identifier of the pinned file
        required: true
        in: path
        schema:
          type: string
      - name: includeDirectoryContent
        description: informs whether or not content of the directory is included
        required: false
        in: query
        schema:
          type: boolean
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Pin"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Ipfs
    patch:
      operationId: PinUpdate
      summary: 'Updates pinned file referenced by {id}'
      parameters:
      - name: id
        description: identifier of the pinned file
        required: true
        in: path
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdatePinDto"
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Pin"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Ipfs
    delete:
      operationId: PinDelete
      summary: 'Deletes pinned file referenced by {id}'
      parameters:
      - name: id
        description: identifier of the pinned file
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Ipfs
  "/v3/ipfs/storage-used":
    get:
      operationId: IpfsGetUsedStorage
      summary: 'Gets storage already used on IPFS'
      parameters: []
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/PROJECT_ID_HEADER_REQUIRED"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Ipfs
  "/v3/ipfs/file":
    post:
      operationId: IpfsFileCreate
      summary: 'Uploads a file on IPFS'
      description: |
        THE "BODY" PARAMETERS ARE "FORM" PARAMETERS FOR THIS ENDPOINT. You can see the object format in Typescript below.

            import {readFileSync} from "fs";
            import FormData = require("form-data");
            import {headerConfig, startonUrl} from "./variables";
            import axios from "axios";


            function bufferFromLocalPath(path: string){
                return readFileSync(path);
            }

            async function uploadFileOnIPFS(
                path: string,
                dashboardName: string
            ) {
                const bufferFile: Buffer = bufferFromLocalPath(path)
                console.log(bufferFile)
                let data = new FormData();

            let storage_name: string = dashboardName;
            data.append("file", bufferFile, storage_name);
            data.append("isSync", "true");
            console.log(data)

            const ipfsFileResponse = await axios.post(startonUrl + "/ipfs/file", data, {
                maxBodyLength: Infinity,
                headers: {
                    ...headerConfig
                    ,"Content-Type": `multipart/form-data; boundary=${data.getBoundary()}`
                },
            });
            console.log(ipfsFileResponse.data)
            return ipfsFileResponse.data
            }

            uploadFileOnIPFS("./folder/a.txt", "hello").then().catch(e=>console.log(e))

      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              "$ref": "#/components/schemas/UploadFileDto"
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Pin"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
        '413':
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/MAXIMUM_STORAGE_REACHED"
                - "$ref": "#/components/schemas/PAYLOAD_TOO_LARGE"
      tags:
      - Ipfs
  "/v3/ipfs/folder":
    post:
      operationId: IpfsFolderCreate
      summary: 'Upload folder on IPFS'
      description: 'This endpoints accepts multiple files and jsons to be pinned together inside a folder on IPFS.
                    By giving an array of names, the content will be available using the folder CID and the content name on IPFS.
                    For example : ipfs://ipfs/{folderCID}/myFile.txt
                    THE "BODY" PARAMETERS ARE "FORM" PARAMETERS FOR THIS ENDPOINT !!'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UploadFolderDto"
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Pin"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
        '413':
          description: 'Maximum storage capacity reached.'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/MAXIMUM_STORAGE_REACHED"
                - "$ref": "#/components/schemas/PAYLOAD_TOO_LARGE"
      tags:
      - Ipfs
  "/v3/ipfs/json":
    post:
      operationId: IpfsJsonCreate
      summary: 'Upload JSON file on IPFS'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UploadJsonDto"
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Pin"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/PROJECT_ID_HEADER_REQUIRED"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
        '413':
          description: 'Maximum storage capacity reached.'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/MAXIMUM_STORAGE_REACHED"
      tags:
      - Ipfs
  "/v3/smart-contract-template":
    get:
      operationId: SmartContractTemplateGetAll
      summary: 'Gets all the smart contract templates'
      parameters:
      - name: page
        description: 'The index of the page from the result'
        required: false
        in: query
        schema:
          type: number
      - name: limit
        description: 'Maximum number of elements to return'
        required: false
        in: query
        schema:
          maximum: 100
          type: number
      - name: isAudited
        description: 'If defined, returns only the templates with a matching "isAudited" value'
        required: false
        in: query
        schema:
          type: boolean
      - name: isActivated
        description: 'If defined, returns only the templates with a matching "isActivated" value'
        required: false
        in: query
        schema:
          type: boolean
      - name: name
        description: 'Filters on the name'
        required: false
        in: query
        schema:
          type: boolean
      - name: includeCompilationDetails
        description: 'Should the response include the compilation details such as bytecode and source code'
        required: false
        in: query
        schema:
          type: boolean
      responses:
        '200':
          description: 'Successful.'
          content:
            application/json:
              schema:
                title: PaginatedResponseOfSmartContractTemplateEntity
                allOf:
                - "$ref": "#/components/schemas/Paginate"
                - properties:
                    items:
                      type: array
                      items:
                        "$ref": "#/components/schemas/SmartContractTemplateEntity"
      tags:
      - Library
  "/v3/smart-contract-template/{id}":
    get:
      operationId: SmartContractTemplateGetOne
      summary: 'Gets the {id} smart contract template'
      description: 'Returns the smart contract template identified by {id}.'
      parameters:
      - name: id
        description: 'Identifier of the smart contract template to get'
        required: true
        in: path
        schema:
          type: string
      - name: includeCompilationDetails
        description: 'Should the response include the compilation details such as bytecode and source code?'
        required: false
        in: query
        schema:
          type: boolean
      responses:
        '200':
          description: 'Successful.'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SmartContractTemplateEntity"
        '404':
          description: 'Not found. '
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Library
  "/v3/webhook/signing-secret":
    get:
      operationId: WebhookSigningSecretGet
      summary: 'Get the webhook signing secret'
      parameters: []
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WebhookSigningSecretEntity"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/PROJECT_ID_HEADER_REQUIRED"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Webhook
  "/v3/webhook/signing-secret/regenerate":
    post:
      operationId: WebhookSigningSecretRegenerate
      summary: 'Generate the webhook signing again'
      parameters: []
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WebhookSigningSecretEntity"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/PROJECT_ID_HEADER_REQUIRED"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Webhook
  "/v3/webhook":
    get:
      operationId: WebhookGetAll
      summary: 'Gets the list of all the webhooks'
      parameters:
      - name: page
        description: The index of the page from the result
        required: false
        in: query
        schema:
          type: number
      - name: limit
        description: The maximum number of webhooks to return
        required: false
        in: query
        schema:
          maximum: 100
          type: number
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                title: PaginatedResponseOfWebhookEntity
                allOf:
                - "$ref": "#/components/schemas/Paginate"
                - properties:
                    items:
                      type: array
                      items:
                        "$ref": "#/components/schemas/WebhookEntity"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/PROJECT_ID_HEADER_REQUIRED"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Webhook
  "/v3/webhook/{id}":
    get:
      operationId: WebhookGetOne
      summary: 'Get a specific webhook identified by {id}'
      parameters:
      - name: id
        description: The identifier of the webhook
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WebhookEntity"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/PROJECT_ID_HEADER_REQUIRED"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Webhook
  "/v3/webhook/{id}/resend":
    post:
      operationId: WebhookResend
      summary: 'Sends the webhook again'
      parameters:
      - name: id
        description: The identifier of the webhook
        required: true
        in: path
        schema:
          type: string
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WebhookEntity"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/PROJECT_ID_HEADER_REQUIRED"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Webhook
  "/v3/webhook/{id}/cancel":
    post:
      operationId: WebhookCancel
      summary: 'Cancels webhook identified by {id}'
      parameters:
      - name: id
        description: 'Identifier of the webhook'
        required: true
        in: path
        schema:
          type: string
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WebhookEntity"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/PROJECT_ID_HEADER_REQUIRED"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Webhook
  "/v3/watcher":
    get:
      operationId: WatcherGetAll
      summary: 'Gets the list of all the existing watchers'
      parameters:
      - name: page
        description: The index of the page from the result
        required: false
        in: query
        schema:
          type: number
      - name: limit
        description: Maximum number of elements to return
        required: false
        in: query
        schema:
          maximum: 100
          type: number
      - name: address
        description: The address of the smart contract
        required: false
        in: query
        schema:
          type: string
      - name: network
        description: Network on which are deployed the webhooks.
        required: false
        in: query
        schema:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-fuji
          - avalanche-mainnet
          type: string
      - name: type
        required: false
        in: query
        schema:
          enum:
          - MINED_TRANSACTION
          - ADDRESS_ACTIVITY
          - ADDRESS_RECEIVED_NATIVE_CURRENCY
          - ADDRESS_SENT_NATIVE_CURRENCY
          - EVENT_TRANSFER
          - ERC721_EVENT_TRANSFER
          - ERC1155_EVENT_TRANSFER_SINGLE
          - ERC1155_EVENT_TRANSFER_BATCH
          - EVENT_MINT
          - EVENT_APPROVAL
          - NEW_BLOCK
          type: string
      - name: webhookUrl
        required: false
        in: query
        schema:
          type: string
      - name: confirmationsBlocks
        required: false
        in: query
        schema:
          type: number
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                title: PaginatedResponseOfWatcherEntity
                allOf:
                - "$ref": "#/components/schemas/Paginate"
                - properties:
                    items:
                      type: array
                      items:
                        "$ref": "#/components/schemas/WatcherEntity"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/PROJECT_ID_HEADER_REQUIRED"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Watcher
    post:
      operationId: WatcherCreateOne
      summary: 'Creates a new watcher'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateWatcherDto"
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WatcherEntity"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/PROJECT_ID_HEADER_REQUIRED"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Watcher
  "/v3/watcher/{id}":
    get:
      operationId: WatcherGetOne
      summary: 'Gets a specific watcher identified by {id}'
      parameters:
      - name: id
        description: The identifier of the webhook
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WatcherEntity"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/PROJECT_ID_HEADER_REQUIRED"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Watcher
    patch:
      operationId: WatcherUpdate
      summary: 'Updates the watcher identified by {id}'
      parameters:
      - name: id
        description: The identifier of the webhook
        required: true
        in: path
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateWatcherDto"
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WatcherEntity"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/PROJECT_ID_HEADER_REQUIRED"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Watcher
    delete:
      operationId: WatcherDelete
      summary: 'Deletes a watcher identified by {id}'
      parameters:
      - name: id
        description: The identifier of the webhook
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/PROJECT_ID_HEADER_REQUIRED"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Watcher
  "/v3/watcher/many-networks":
    post:
      operationId: WatcherCreateMany
      summary: 'Creates a watcher on several networks'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateManyWatcherDto"
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/WatcherEntity"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/PROJECT_ID_HEADER_REQUIRED"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Watcher
  "/v3/watcher/{id}/event":
    get:
      operationId: WatcherEventGetAll
      summary: 'Gets all the events for a watcher'
      description: 'Gets the list of all events which triggered watcher {id}.'
      parameters:
      - name: id
        description: 'Identifier of the watcher'
        required: true
        in: path
        schema:
          type: string
      - name: page
        description: The index of the page from the result
        required: false
        in: query
        schema:
          type: number
      - name: limit
        description: Maximum number of elements to return
        required: false
        in: query
        schema:
          maximum: 100
          type: number
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                title: PaginatedResponseOfWatcherEventEntity
                allOf:
                - "$ref": "#/components/schemas/Paginate"
                - properties:
                    items:
                      type: array
                      items:
                        "$ref": "#/components/schemas/WatcherEventEntity"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/PROJECT_ID_HEADER_REQUIRED"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Watcher
  "/v3/watcher/{id}/event/{eventId}":
    get:
      operationId: WatcherEventGetOne
      summary: 'Gets event {eventId} that triggered watcher {id}'
      description: 'Gets the specific event which triggered watcher {id}.'
      parameters:
      - name: eventId
        description: Identifier of the event
        required: true
        in: path
        schema:
          type: string
      - name: id
        description: 'Identifier of the watcher'
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WatcherEventEntity"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/PROJECT_ID_HEADER_REQUIRED"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Watcher

  /v3/api-key:
    get:
      operationId: ApiKeyGetAll
      summary: 'Gets all API Keys'
      parameters:
        - name: name
          required: false
          in: query
          schema:
            pattern: ^[\w\-\s]+$
            type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                title: PaginatedResponseOfApiKey
                allOf:
                  - $ref: '#/components/schemas/Paginate'
                  - properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/ApiKey'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BAD_REQUEST_EXCEPTION'
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/NOT_AUTHENTICATED'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/FORBIDDEN'
      tags:
        - Api Key
    post:
      operationId: ApiKeyCreate
      summary: 'Creates an API key'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyDto'
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BAD_REQUEST_EXCEPTION'
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/NOT_AUTHENTICATED'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/FORBIDDEN'
      tags:
        - Api Key
  /v3/api-key/{id}:
    delete:
      operationId: ApiKeyDelete
      summary: 'Deletes an API key'
      parameters:
        - name: id
          description: 'id of the key to delete'
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                type: number
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/NOT_AUTHENTICATED'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/FORBIDDEN'
      tags:
        - Api Key
  "/v3/project":
    get:
      operationId: ProjectGetAll
      summary: 'Gets all existing projects'
      description: 'Returns the list of existing projects.'
      parameters:
      - name: page
        description: The index of the page from the result
        required: false
        in: query
        schema:
          type: number
      - name: limit
        description: Maximum number of elements to return
        required: false
        in: query
        schema:
          maximum: 100
          type: number
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                title: PaginatedResponseOfProjectEntity
                allOf:
                - "$ref": "#/components/schemas/Paginate"
                - properties:
                    items:
                      type: array
                      items:
                        "$ref": "#/components/schemas/ProjectEntity"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Project
    post:
      operationId: ProjectCreate
      summary: 'Creates a new project'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateProjectDto"
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectEntity"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Project
  "/v3/project/{id}":
    get:
      operationId: ProjectGetOne
      summary: 'Gets a specific project'
      description: 'Gets the project identified by {id} '
      parameters:
      - name: id
        description: 'Project ID'
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectEntity"
        '401':
          description: 'Successful'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Project not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Project
    delete:
      operationId: ProjectDelete
      summary: 'Deletes the project {id}'
      description: 'Deletes the project identified by {id}'
      parameters:
      - name: id
        description: 'Identifier of the project to delete'
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Project
    patch:
      operationId: UpdateProject
      summary: 'Updates the project identified by {id}'
      description: 'Updates the project identified by {id}.'
      parameters:
      - name: id
        description: 'Identifier of the project to update'
        required: true
        in: path
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateProjectDto"
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectEntity"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Project
  "/v3/kms":
    get:
      operationId: KmsGetAll
      summary: 'Gets all existing KMS'
      description: 'Gets all existing Key Management Systems'
      parameters: []
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                title: PaginatedResponseOfKms
                allOf:
                - "$ref": "#/components/schemas/Paginate"
                - properties:
                    items:
                      type: array
                      items:
                        "$ref": "#/components/schemas/Kms"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Kms
    post:
      operationId: KmsCreate
      summary: 'Creates a Key Management System'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateKmsDto"
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Kms"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Kms
  "/v3/kms/{id}":
    get:
      operationId: KmsGetOne
      summary: 'Gets the Key Management System identified by {id}'
      parameters:
      - name: id
        description: The identifier of the key management system
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Kms"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Kms
    patch:
      operationId: KmsUpdate
      summary: 'Updates the Key Management System identified by {id}'
      parameters:
      - name: id
        description: The identifier of the key management system
        required: true
        in: path
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateKmsDto"
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Kms"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Kms
    delete:
      operationId: KmsDelete
      summary: 'Deletes Starton access to the Key Management System identified by {id}'
      parameters:
      - name: id
        description: The identifier of the key management system
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                type: number
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Kms
  "/v3/kms/wallet":
    get:
      operationId: WalletGetAll
      summary: 'Gets the list of wallets'
      parameters:
      - name: name
        description: The name of the wallet
        required: false
        in: query
        schema:
          pattern: "^[\\w\\-\\s]+$"
          type: string
      - name: isExternal
        description: True if the wallet is a third party wallet
        required: false
        in: query
        schema:
          type: boolean
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                title: PaginatedResponseOfWallet
                allOf:
                - "$ref": "#/components/schemas/Paginate"
                - properties:
                    items:
                      type: array
                      items:
                        "$ref": "#/components/schemas/Wallet"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Kms
    post:
      operationId: WalletCreate
      summary: 'Creates a wallet'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateWalletDto"
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Wallet"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Kms
  "/v3/kms/wallet/{address}":
    get:
      operationId: WalletGetOne
      summary: 'Gets a specific wallet'
      description: 'Returns the specific wallet identified by {address}'
      parameters:
      - name: address
        description: The address of the wallet
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: 'Successful.'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Wallet"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Kms
    patch:
      operationId: WalletUpdate
      summary: 'Updates the wallet'
      parameters:
      - name: address
        description: The address of the wallet
        required: true
        in: path
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateWalletDto"
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Wallet"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Kms
    delete:
      operationId: WalletDelete
      summary: 'Deletes a wallet'
      parameters:
      - name: address
        description: The address of the wallet
        required: true
        in: path
        schema:
          type: string
      - name: deleteKeyOnKms
        description: Deletes key on the key management system as well.
        required: false
        in: query
        schema:
          type: boolean
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                type: number
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Kms
  /v3/kms/wallet/import-provider-key:
    post:
      operationId: WalletImportProviderKey
      summary: 'Imports the provider key of the wallet you need from your kms'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportProviderKeyDto'
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/NOT_AUTHENTICATED'
      tags:
        - Kms
  "/v3/kms/wallet/{address}/sign-message":
    post:
      operationId: WalletSignMessage
      summary: 'Signs message using wallet {address}'
      parameters:
      - name: address
        description: The address of the wallet
        required: true
        in: path
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SignMessageDto"
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                type: object
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Kms
  "/v3/kms/wallet/{address}/{network}/nonce/available":
    get:
      operationId: WalletAvailableNonces
      summary: 'Gets the next available nonce for a wallet address on a network'
      parameters:
      - name: address
        description: The address of the wallet
        required: true
        in: path
        schema:
          type: string
      - name: network
        description: The network of which the next available nonce is needed
        required: true
        in: path
        schema:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
          type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/NoncesAvailable"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
        '422':
          description: 'Underpriced transaction'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_PROCESS_ENTITY"
        '500':
          description: 'Unknown error'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_ASSIGN_NONCE"
      tags:
      - Kms
  "/v3/kms/wallet/{address}/{network}/nonce/resync":
    post:
      operationId: WalletResyncNonce
      summary: 'Resyncs next available nonce with database for a specific wallet on a network'
      parameters:
      - name: address
        description: The address of the wallet
        required: true
        in: path
        schema:
          type: string
      - name: network
        description: Network on which are deployed the smart contracts.
        required: true
        in: path
        schema:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
          type: string
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/resyncNonce"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Resource not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
        '500':
          description: 'Could not assign nonce'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_ASSIGN_NONCE"
      tags:
      - Kms
  "/v3/gas-price/{network}":
    get:
      operationId: GasPriceGetAllForNetwork
      summary: 'Get gas price information for a network'
      description: 'Returns gas price information according to different speeds on a specific {network}'
      parameters:
      - name: network
        description: 'Network which gas price will be returning from'
        required: true
        in: path
        schema:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
          type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GasPrice"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
        '401':
          description: 'Not Authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - GasPrice
  "/v3/transaction":
    get:
      operationId: TransactionGetAll
      summary: 'Gets all transactions'
      parameters:
      - name: network
        description: 'Network on which are deployed the smart contracts.'
        required: false
        in: query
        schema:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
          type: string
      - name: transactionHash
        description: 'The transaction hash of the smart contract'
        required: false
        in: query
        schema:
          type: string
      - name: to
        description: 'Receiver of the transaction. It is a smart contract if calling one of its functions.'
        required: false
        in: query
        schema:
          type: string
      - name: from
        description: 'Wallet used to sign the transaction'
        required: false
        in: query
        schema:
          type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                title: PaginatedResponseOfTransaction
                allOf:
                - "$ref": "#/components/schemas/Paginate"
                - properties:
                    items:
                      type: array
                      items:
                        "$ref": "#/components/schemas/Transaction"
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - Transaction
    post:
      operationId: TransactionCreate
      summary: 'Creates a new transaction'
      parameters:
      - name: simulate
        description: 'Is it a simulation?'
        required: false
        in: query
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateTransactionDto"
      responses:
        '201':
          description:  'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Transaction"
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NONCE_EXPIRED"
                - "$ref": "#/components/schemas/EXECUTION_WILL_FAIL"
                - "$ref": "#/components/schemas/INVALID_GAS_PRICE"
                - "$ref": "#/components/schemas/INSUFFICIENT_FUNDS"
                - "$ref": "#/components/schemas/ALREADY_KNOWN"
                - "$ref": "#/components/schemas/UNPREDICTABLE_GAS_LIMIT"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
        '422':
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/REPLACEMENT_UNDERPRICED"
        '500':
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_ASSIGN_NONCE"
                - "$ref": "#/components/schemas/COULD_NOT_BROADCAST"
                - "$ref": "#/components/schemas/COULD_NOT_ESTIMATE_GAS_PRICE"
                - "$ref": "#/components/schemas/NO_PROVIDER_FOR_NETWORK"
                - "$ref": "#/components/schemas/COULD_NOT_SIGN"
                - "$ref": "#/components/schemas/UNKNOWN"
      tags:
      - Transaction
  "/v3/transaction/{id}":
    get:
      operationId: TransactionGetOne
      summary: 'Gets a specific transaction identified by {id}'
      parameters:
      - name: id
        description: The id of the transaction
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Transaction"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - Transaction
  "/v3/faucet/{network}":
    post:
      operationId: FaucetRequest
      summary: 'Request faucet for a specific {network}'
      parameters:
      - name: network
        description: 'Specifies the network on which faucet is required.'
        required: true
        in: path
        schema:
          enum:
          - ethereum-ropsten
          - ethereum-goerli
          - binance-testnet
          - polygon-mumbai
          - avalanche-fuji
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequireFaucetDto"
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Faucet"
      tags:
      - Faucet
  "/v3/smart-contract/{network}":
    get:
      operationId: SmartContractGetAllForNetwork
      summary: 'Gets the list of smart contracts for a network'
      parameters:
      - name: address
        description: The address of the wallet
        required: false
        in: query
        schema:
          type: string
      - name: includeAbi
        description: 'Specifies if ABI needs to be included'
        required: false
        in: query
        schema:
          type: boolean
      - name: includeCompilationDetails
        description: 'Specifies if compilation details need to be included'
        required: false
        in: query
        schema:
          type: boolean
      - name: network
        description: 'Specifies on which network the smart contracts are deployed'
        required: true
        in: path
        schema:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
          type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                title: PaginatedResponseOfSmartContract
                allOf:
                - "$ref": "#/components/schemas/Paginate"
                - properties:
                    items:
                      type: array
                      items:
                        "$ref": "#/components/schemas/SmartContract"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - SmartContract
  "/v3/smart-contract":
    get:
      operationId: SmartContractGetAll
      summary: 'Gets the list of all smart contracts'
      parameters:
      - name: network
        description: 'Specifies on which network the smart contracts are deployed'
        required: false
        in: query
        schema:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
          type: string
      - name: address
        description: 'The address of the wallet'
        required: false
        in: query
        schema:
          type: string
      - name: includeAbi
        description: 'Specifies if the contract ABI needs to be included'
        required: false
        in: query
        schema:
          type: boolean
      - name: includeCompilationDetails
        description: 'Specifies if compilation details need to be included'
        required: false
        in: query
        schema:
          type: boolean
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                title: PaginatedResponseOfSmartContract
                allOf:
                - "$ref": "#/components/schemas/Paginate"
                - properties:
                    items:
                      type: array
                      items:
                        "$ref": "#/components/schemas/SmartContract"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/BAD_REQUEST_EXCEPTION"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - SmartContract
  "/v3/smart-contract/{network}/{address}":
    get:
      operationId: SmartContractGetOne
      summary: 'Gets smart contract located at {address} on {network}'
      parameters:
      - name: includeAbi
        description: 'Specifies if ABI of the contract needs to be included'
        required: false
        in: query
        schema:
          type: boolean
      - name: includeCompilationDetails
        description: 'Specifies if compilation details need to be included'
        required: false
        in: query
        schema:
          type: boolean
      - name: network
        description: 'Specifies the network on which the smart contract is deployed'
        required: true
        in: path
        schema:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
          type: string
      - name: address
        description: 'Specifies the address of the smart contract'
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SmartContract"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - SmartContract
    patch:
      operationId: SmartContractUpdate
      summary: 'Updates the smart contract located at {address} on {network}'
      parameters:
      - name: network
        description: 'Specifies the network on which the smart contract is deployed'
        required: true
        in: path
        schema:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
          type: string
      - name: address
        description: 'The address of the smart contract'
        required: true
        in: path
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateSmartContractDto"
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SmartContract"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
      tags:
      - SmartContract
    delete:
      operationId: SmartContractDelete
      summary: 'Deletes Smart contract located at {address} on {network}'
      parameters:
      - name: network
        description: 'Specifies the network on which the smart contract is deployed'
        required: true
        in: path
        schema:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
          type: string
      - name: address
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                type: number
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - SmartContract
  "/v3/smart-contract/from-bytecode":
    post:
      operationId: SmartContractCreateFromBytecode
      summary: 'Creates smart contrat from bytecode'
      parameters:
      - name: simulate
        description: Enter true if you need to simulate the operation
        required: false
        in: query
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/DeployFromBytecodeDto"
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeploySmartContractResponse"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/INVALID_BYTECODE"
                - "$ref": "#/components/schemas/INVALID_ABI"
                - "$ref": "#/components/schemas/MISSING_ARGUMENT"
                - "$ref": "#/components/schemas/UNEXPECTED_ARGUMENT"
                - "$ref": "#/components/schemas/INVALID_ARGUMENT"
                - "$ref": "#/components/schemas/CALL_EXCEPTION"
                - "$ref": "#/components/schemas/NUMERIC_FAULT"
                - "$ref": "#/components/schemas/ENS_NOT_SUPPORTED"
                - "$ref": "#/components/schemas/EXECUTION_WILL_FAIL"
                - "$ref": "#/components/schemas/INVALID_GAS_PRICE"
                - "$ref": "#/components/schemas/INSUFFICIENT_FUNDS"
                - "$ref": "#/components/schemas/ALREADY_KNOWN"
                - "$ref": "#/components/schemas/NONCE_EXPIRED"
                - "$ref": "#/components/schemas/UNPREDICTABLE_GAS_LIMIT"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
        '422':
          description: 'Replacement transaction is underpriced'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/REPLACEMENT_UNDERPRICED"
        '500':
          description: 'Unknown error'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/UNKNOWN"
                - "$ref": "#/components/schemas/NO_PROVIDER_FOR_NETWORK"
                - "$ref": "#/components/schemas/COULD_NOT_ESTIMATE_GAS_PRICE"
                - "$ref": "#/components/schemas/COULD_NOT_SIGN"
                - "$ref": "#/components/schemas/COULD_NOT_ASSIGN_NONCE"
                - "$ref": "#/components/schemas/COULD_NOT_BROADCAST"
      tags:
      - SmartContract
  "/v3/smart-contract/from-template":
    post:
      operationId: SmartContractCreateFromTemplate
      summary: 'Creates Smart Contract from Template'
      description: 'Deploys a smart contract using a template hosted in the Starton Library. It is possible to only do a simulation by setting the simulate parameter to true.'
      parameters:
      - name: simulate
        description: Enter true if you need to simulate the operation
        required: false
        in: query
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/DeployFromTemplateDto"
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeploySmartContractResponse"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/SMART_CONTRACT_NOT_ACTIVATED"
                - "$ref": "#/components/schemas/INVALID_BYTECODE"
                - "$ref": "#/components/schemas/INVALID_ABI"
                - "$ref": "#/components/schemas/MISSING_ARGUMENT"
                - "$ref": "#/components/schemas/UNEXPECTED_ARGUMENT"
                - "$ref": "#/components/schemas/INVALID_ARGUMENT"
                - "$ref": "#/components/schemas/CALL_EXCEPTION"
                - "$ref": "#/components/schemas/NUMERIC_FAULT"
                - "$ref": "#/components/schemas/ENS_NOT_SUPPORTED"
                - "$ref": "#/components/schemas/EXECUTION_WILL_FAIL"
                - "$ref": "#/components/schemas/INVALID_GAS_PRICE"
                - "$ref": "#/components/schemas/INSUFFICIENT_FUNDS"
                - "$ref": "#/components/schemas/ALREADY_KNOWN"
                - "$ref": "#/components/schemas/NONCE_EXPIRED"
                - "$ref": "#/components/schemas/UNPREDICTABLE_GAS_LIMIT"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
        '500':
          description: 'Unknown error'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/MICROSERVICE_NOT_RESPONDING"
                - "$ref": "#/components/schemas/UNKNOWN"
                - "$ref": "#/components/schemas/COULD_NOT_ESTIMATE_GAS_PRICE"
                - "$ref": "#/components/schemas/COULD_NOT_BROADCAST"
                - "$ref": "#/components/schemas/COULD_NOT_ASSIGN_NONCE"
                - "$ref": "#/components/schemas/COULD_NOT_SIGN"
                - "$ref": "#/components/schemas/NO_PROVIDER_FOR_NETWORK"
      tags:
      - SmartContract
  "/v3/smart-contract/{network}/{address}/call":
    post:
      operationId: SmartContractCall
      summary: 'Calls Smart contract located at {address} on {network}'
      description: 'Find out more on [state and status](https://docs.starton.io/docs/Transactions/state-and-status) in our functional documentation'
      parameters:
      - name: network
        description: 'Specifies the network on which the smart contract is deployed'
        required: true
        in: path
        schema:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
          type: string
      - name: address
        description: 'Specifies the address at which the smart contract is deployed'
        required: true
        in: path
        schema:
          type: string
      - name: simulate
        description: 'Enter true if you need to simulate the operation'
        required: false
        in: query
        schema:
          type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CallDto"
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Transaction"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/INVALID_BYTECODE"
                - "$ref": "#/components/schemas/INVALID_ABI"
                - "$ref": "#/components/schemas/INVALID_FUNCTION"
                - "$ref": "#/components/schemas/MISSING_ARGUMENT"
                - "$ref": "#/components/schemas/UNEXPECTED_ARGUMENT"
                - "$ref": "#/components/schemas/INVALID_ARGUMENT"
                - "$ref": "#/components/schemas/CALL_EXCEPTION"
                - "$ref": "#/components/schemas/NUMERIC_FAULT"
                - "$ref": "#/components/schemas/ENS_NOT_SUPPORTED"
                - "$ref": "#/components/schemas/UNPREDICTABLE_GAS_LIMIT"
                - "$ref": "#/components/schemas/EXECUTION_WILL_FAIL"
                - "$ref": "#/components/schemas/INVALID_GAS_PRICE"
                - "$ref": "#/components/schemas/INSUFFICIENT_FUNDS"
                - "$ref": "#/components/schemas/ALREADY_KNOWN"
                - "$ref": "#/components/schemas/NONCE_EXPIRED"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
        '422':
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/REPLACEMENT_UNDERPRICED"
        '500':
          description: 'Unknown error'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/UNKNOWN"
                - "$ref": "#/components/schemas/COULD_NOT_BROADCAST"
                - "$ref": "#/components/schemas/NO_PROVIDER_FOR_NETWORK"
                - "$ref": "#/components/schemas/COULD_NOT_ESTIMATE_GAS_PRICE"
                - "$ref": "#/components/schemas/COULD_NOT_ASSIGN_NONCE"
                - "$ref": "#/components/schemas/COULD_NOT_SIGN"
                - "$ref": "#/components/schemas/UNKNOWN"
      tags:
      - SmartContract
  "/v3/smart-contract/{network}/{address}/read":
    post:
      operationId: SmartContractRead
      summary: 'Reads Smart Contract located at {address} on {network}'
      parameters:
      - name: network
        description: 'Specifies the network on which the smart contract is located.'
        required: true
        in: path
        schema:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
          type: string
      - name: address
        description: 'Specifies the address of the contract'
        required: true
        in: path
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ReadDto"
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReadSmartContractResponse"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/INVALID_BYTECODE"
                - "$ref": "#/components/schemas/INVALID_ABI"
                - "$ref": "#/components/schemas/INVALID_FUNCTION"
                - "$ref": "#/components/schemas/MISSING_ARGUMENT"
                - "$ref": "#/components/schemas/UNEXPECTED_ARGUMENT"
                - "$ref": "#/components/schemas/INVALID_ARGUMENT"
                - "$ref": "#/components/schemas/CALL_EXCEPTION"
                - "$ref": "#/components/schemas/NUMERIC_FAULT"
                - "$ref": "#/components/schemas/ENS_NOT_SUPPORTED"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
        '500':
          description: 'Unknown error'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/UNKNOWN"
      tags:
      - SmartContract
  "/v3/smart-contract/{network}/{address}/available-functions":
    get:
      operationId: SmartContractGetAvailableFunctions
      summary: 'Gets available Smart Contract located at {address} on {network}'
      parameters:
      - name: network
        description: 'Specifies the network on which the smart contract is located.'
        required: true
        in: path
        schema:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
          type: string
      - name: address
        description: 'Specifies the address of the smart contract.'
        required: true
        in: path
        schema:
          type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AvailableFunctions"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/INVALID_BYTECODE"
                - "$ref": "#/components/schemas/INVALID_ABI"
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/COULD_NOT_FIND_RESOURCE"
        '500':
          description: 'Unknown error'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/UNKNOWN"
      tags:
      - SmartContract
  "/v3/smart-contract/import-existing":
    post:
      operationId: SmartContractImportExisting
      summary: 'Pins existing smart contract'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ImportSmartContractDto"
      responses:
        '201':
          description: 'Successful'
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SmartContract"
        '400':
          description: 'x-project-id required'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/INVALID_CONTRACT_ADDRESS"
        '401':
          description: 'Not authenticated'
          content:
            application/json:
              schema:
                oneOf:
                - "$ref": "#/components/schemas/NOT_AUTHENTICATED"
      tags:
      - SmartContract
info:
  title: 'Starton Connect: Documentation'
  description: |
    An API is an application programming interface. It is a set of routines, functions, data structures and other tools that make possible for computers program to communicate with each other.
    Starton API is a **REST API**. A **REST API** is an application program interface that uses **HTTP requests** to send information between client and server.

    It's a protocol that works over the web and uses **URLs (Uniform Resource Locators)** to identify resources. Information or content can be accessed at a URLs location, such as JSON, HTML, audio files or images.
    Often resources have one or more methods that can be performed on them over **HTTP (Hypertext Transfer Protocol)**, such as **GET**, **POST**, **PUT** and **DELETE**. The action represented by the first and last of these is clear; but **POST** and **PUT** have specific meanings: use **POST** to create resources; use **PUT** to update them.
    ### Authenticating on Starton API

    To use Starton from your code, you will need to authenticate yourself to the API through an API key.

    ### What is an API Key ?

    An API key (Application Programming Key) is used to authenticate yourself to an API.
    For example, Starton can generate API keys related to the use of Connect, so you can call our API from your code and authenticate yourself with it.
    The API keys generated by Starton are linked to a specific project, which means you could have multiple API keys.
    API keys are linked to your projects/account, so anyone gaining access to your API keys could use your credits by pretending to be you.

    ### Generating an API Key

    On the **Developer** section, you can generate new API keys or revoke the previous ones (for example, if they leaked).

    ### Using an API Key
    The **API key** will be needed in your code if you try to call Starton's API endpoints (as the x-api-key variable in the Headers of the requests).
  version: '3.0'
  contact: {}
tags:
- name: Library
  description: The list of available smart contract templates
- name: Webhook
  description: The list of API endpoints related to webhooks
- name: Watcher
  description: The list of conditions that trigger a watcher event
- name: Project
  description: The list of API endpoints related to project
- name: Api Key
  description: The list of API endpoints related to API key
- name: Transaction
  description: The list of API endpoints related to transactions
- name: Api Key
  description: The list of API endpoints related to API Key
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    NOT_AUTHENTICATED:
      type: object
      properties:
        statusCode:
          type: number
          default: '401'
        errorCode:
          type: string
          default: NOT_AUTHENTICATED
        message:
          type: string
          default: Not authenticated.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    BAD_REQUEST_EXCEPTION:
      type: object
      properties:
        statusCode:
          type: number
          default: 400
        errorCode:
          type: string
          default: BAD_REQUEST_EXCEPTION
        message:
          type: string
          default:
          - Bad request. Please verify your inputs.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    COULD_NOT_FIND_RESOURCE:
      type: object
      properties:
        statusCode:
          type: number
          default: '404'
        errorCode:
          type: string
          default: COULD_NOT_FIND_RESOURCE
        message:
          type: string
          default: Could not found resource.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    DirectoryContent:
      type: object
      properties:
        cid:
          type: string
        path:
          type: string
        size:
          type: number
      required:
      - cid
      - path
      - size
    Pin:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        cid:
          type: string
        origins:
          type: array
          items:
            type: string
        metadata:
          type: object
        status:
          enum:
          - queued
          - pinning
          - pinned
          - failed
          - deleted
          type: string
        delegates:
          type: array
          items:
            type: string
        size:
          type: number
        type:
          enum:
          - directory
          - file
          type: string
        directoryContent:
          type: array
          items:
            "$ref": "#/components/schemas/DirectoryContent"
        projectId:
          type: string
        createdAt:
          format: date-time
          type: string
          default: '2022-11-03T11:45:46.075Z'
        updatedAt:
          format: date-time
          type: string
          default: '2022-11-03T11:45:46.075Z'
      required:
      - id
      - status
      - projectId
      - createdAt
      - updatedAt
    UpdatePinDto:
      type: object
      properties:
        name:
          description: updated name for the pinned file
          type: string
          maxLength: 255
        metadata:
          description: updated metadata for the pinned file
          type: object
    CreatePinDto:
      type: object
      properties:
        cid:
          description: Content identifier of the file to pin
          type: string
        name:
          description: Name for the file to pin
          type: string
          maxLength: 255
        origins:
          type: array
          items:
            type: string
        metadata:
          description: Metadata for the file to pin
          type: object
      required:
      - cid
    PROJECT_ID_HEADER_REQUIRED:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: PROJECT_ID_HEADER_REQUIRED
        message:
          type: string
          default: You must set an header x-project-id when logged with cookie
      required:
      - statusCode
      - errorCode
      - message
    MAXIMUM_STORAGE_REACHED:
      type: object
      properties:
        statusCode:
          type: number
          default: '413'
        errorCode:
          type: string
          default: MAXIMUM_STORAGE_REACHED
        message:
          type: string
          default: The max storage size allowed for this project would be exceeded.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    PAYLOAD_TOO_LARGE:
      type: object
      properties:
        statusCode:
          type: number
          default: 413
        errorCode:
          type: string
          default: PAYLOAD_TOO_LARGE
        message:
          type: string
          default: Payload too large.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    UploadFileDto:
      type: object
      properties:
        file:
          description: The buffer and the name of your file
          type: buffer, name
        isSync:
          description: 'Should the request wait for the pinning to be done before completing (default: false)'
          type: boolean
        metadata:
          description: Metadata associated to the request
          type: object
    UploadFolderDto:
      type: object
      properties:
        metadata:
          description: metadata for the folder to upload
          type: object
        folderName:
          description: name for the folder to upload
          type: string
    UploadJsonDto:
      type: object
      properties:
        name:
          description: name for the json to upload
          type: string
          maxLength: 255
        content:
          description: content of the json file to upload
          type: object
        metadata:
          description: metadata for the json file to upload
          type: object
      required:
      - name
      - content
    PinInfo:
      type: object
      properties:
        size:
          type: number
        directoryContent:
          type: array
          items:
            "$ref": "#/components/schemas/DirectoryContent"
      required:
      - size
    PinningServiceResult:
      type: object
      properties:
        requestid:
          type: string
        status:
          enum:
          - queued
          - pinning
          - pinned
          - failed
          - deleted
          type: string
        created:
          format: date-time
          type: string
    PinningServicePinResultPaginated:
      type: object
      properties:
        count:
          type: number
        results:
          type: array
          items:
            "$ref": "#/components/schemas/PinningServiceResult"
      required:
      - count
      - results
    PinningServiceCreatePinDto:
      type: object
      properties:
        cid:
          type: string
        name:
          type: string
          maxLength: 255
        origins:
          type: array
          items:
            type: string
        meta:
          type: object
      required:
      - cid
    PinningContent:
      type: object
      properties:
        requestid:
          type: string
        projectId:
          type: string
        status:
          enum:
          - queued
          - pinning
          - pinned
          - failed
          - deleted
          type: string
        created:
          format: date-time
          type: string
        updated:
          format: date-time
          type: string
        pinStatus:
          type: object
          properties:
            requestid:
              required: true
              type: string
            projectId:
              required: true
              type: string
            status:
              required: true
              enum:
              - queued
              - pinning
              - pinned
              - failed
              - deleted
              type: string
            delegates:
              required: true
              type: array
              items:
                type: string
            info:
              required: true
              "$ref": "#/components/schemas/PinInfo"
            created:
              format: date-time
              required: true
              type: string
            updated:
              format: date-time
              required: true
              type: string
            pin:
              type: object
              properties:
                cid:
                  required: true
                  type: string
                name:
                  required: true
                  type: string
                origins:
                  required: false
                  type: array
                  items:
                    type: string
                meta:
                  required: false
                  type: object
                created:
                  format: date-time
                  required: true
                  type: string
                updated:
                  format: date-time
                  required: true
                  type: string
      required:
      - requestid
      - projectId
      - status
      - created
      - updated
      - pinStatus
    PinningContentPaginated:
      type: object
      properties:
        count:
          type: number
        results:
          type: array
          items:
            "$ref": "#/components/schemas/PinningContent"
      required:
      - count
      - results
    CreateStoreFileRequestDto:
      type: object
      properties:
        meta:
          type: object
        isSync:
          type: boolean
          default: false
    CreateStoreMultipleContentsRequestDto:
      type: object
      properties:
        meta:
          type: object
        jsons:
          type: array
          items:
            type: object
        folderName:
          type: string
        isSync:
          type: boolean
          default: false
    CreateStoreJsonRequestDto:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        content:
          type: object
        meta:
          type: object
        isSync:
          type: boolean
          default: false
      required:
      - name
      - content
    PinningResult:
      type: object
      properties:
        requestid:
          type: string
        projectId:
          type: string
        status:
          enum:
          - queued
          - pinning
          - pinned
          - failed
          - deleted
          type: string
        created:
          format: date-time
          type: string
        updated:
          format: date-time
          type: string
        pin:
          type: object
          properties:
            cid:
              required: false
              type: string
            name:
              required: false
              type: string
            origins:
              required: false
              type: array
              items:
                type: string
            meta:
              required: false
              type: object
            created:
              format: date-time
              required: true
              type: string
            updated:
              format: date-time
              required: true
              type: string
        delegates:
          type: array
          items:
            type: string
        info:
          "$ref": "#/components/schemas/PinInfo"
      required:
      - requestid
      - projectId
      - status
      - created
      - updated
      - pin
      - delegates
    PinningPinResultPaginated:
      type: object
      properties:
        count:
          type: number
        results:
          type: array
          items:
            "$ref": "#/components/schemas/PinningResult"
      required:
      - count
      - results
    PinningCreatePinDto:
      type: object
      properties:
        cid:
          type: string
        name:
          type: string
          maxLength: 255
        origins:
          type: array
          items:
            type: string
        meta:
          type: object
      required:
      - cid
    PaginationData:
      type: object
      properties:
        itemCount:
          type: number
        totalItems:
          type: number
        itemsPerPage:
          type: number
        totalPages:
          type: number
        currentPage:
          type: number
      required:
      - itemCount
      - itemsPerPage
      - currentPage
    Paginate:
      type: object
      properties:
        meta:
          "$ref": "#/components/schemas/PaginationData"
      required:
      - meta
    SmartContractTemplateTagEntity:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        color:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
      - id
      - name
      - color
      - createdAt
      - updatedAt
    SmartContractTemplateEntity:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        shortDescription:
          type: string
        tags:
          type: array
          items:
            "$ref": "#/components/schemas/SmartContractTemplateTagEntity"
        blockchains:
          type: array
          items:
            type: string
            enum:
            - ethereum
            - binance
            - polygon
            - avalanche
        humanReadableAbi:
          type: array
          items:
            type: string
        abi:
          type: array
          items:
            type: object
        compilationDetails:
          type: object
        isAudited:
          type: boolean
        isActivated:
          type: boolean
        order:
          type: number
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
      - id
      - name
      - description
      - shortDescription
      - tags
      - blockchains
      - humanReadableAbi
      - abi
      - compilationDetails
      - isAudited
      - isActivated
      - order
      - createdAt
      - updatedAt
    WebhookSigningSecretEntity:
      type: object
      properties:
        projectId:
          type: string
        secret:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
      - projectId
      - secret
      - createdAt
      - updatedAt
    WebhookEntity:
      type: object
      properties:
        id:
          type: string
        refId:
          type: string
        status:
          enum:
          - RETRYING
          - SUCCESSFUL
          - FAILED
          - CANCELED
          type: string
        payload:
          type: object
        url:
          type: string
        headers:
          type: object
        attempts:
          type: array
          items:
            type: object
        projectId:
          description: identifier of the project
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
      - id
      - refId
      - status
      - payload
      - url
      - headers
      - attempts
      - projectId
      - createdAt
      - updatedAt
    WatcherEntity:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        address:
          type: string
        network:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-fuji
          - avalanche-mainnet
          type: string
        projectId:
          type: string
        type:
          enum:
          - MINED_TRANSACTION
          - ADDRESS_ACTIVITY
          - ADDRESS_RECEIVED_NATIVE_CURRENCY
          - ADDRESS_SENT_NATIVE_CURRENCY
          - EVENT_TRANSFER
          - ERC721_EVENT_TRANSFER
          - ERC1155_EVENT_TRANSFER_SINGLE
          - ERC1155_EVENT_TRANSFER_BATCH
          - EVENT_MINT
          - EVENT_APPROVAL
          - NEW_BLOCK
          type: string
        triggerType:
          enum:
          - BLOCK
          - TRANSACTION
          - EVENT
          - GAS_PRICE
          type: string
        webhookUrl:
          type: string
        events:
          type: array
          items:
            "$ref": "#/components/schemas/WatcherEventEntity"
        confirmationsBlocks:
          type: number
        paused:
          type: boolean
        pausedReason:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
      - id
      - address
      - network
      - projectId
      - type
      - triggerType
      - webhookUrl
      - events
      - confirmationsBlocks
      - paused
      - createdAt
      - updatedAt
    WatcherEventEntity:
      type: object
      properties:
        id:
          type: string
        watcher:
          "$ref": "#/components/schemas/WatcherEntity"
        watcherId:
          type: string
        blockNumber:
          type: number
        blockHash:
          type: string
        txHash:
          type: string
        network:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-fuji
          - avalanche-mainnet
          type: string
        status:
          enum:
          - PENDING_VALIDATION
          - COMPLETED
          - CANCELED
          type: string
        payload:
          type: object
        projectId:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
      - id
      - watcher
      - watcherId
      - blockNumber
      - blockHash
      - txHash
      - network
      - status
      - payload
      - projectId
      - createdAt
      - updatedAt
    UpdateWatcherDto:
      type: object
      properties:
        paused:
          description: Is the watcher paused?
          type: boolean
        webhookUrl:
          description: URL of the webhook
          type: string
        confirmationsBlocks:
          description: Number of confirmation blocks
          type: number
        name:
          description: Name of the watcher
          type: string
        description:
          description: Description of the watcher
          type: string
      required:
      - webhookUrl
      - confirmationsBlocks
    CreateWatcherDto:
      type: object
      properties:
        name:
          description: Name of the watcher
          type: string
        description:
          description: Description of the watcher
          type: string
        address:
          description: Address of the watcher
          type: string
        network:
          description: Network of the watcher
          type: string
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-fuji
          - avalanche-mainnet
        type:
          description: Type of events watched
          type: string
          enum:
          - MINED_TRANSACTION
          - ADDRESS_ACTIVITY
          - ADDRESS_RECEIVED_NATIVE_CURRENCY
          - ADDRESS_SENT_NATIVE_CURRENCY
          - EVENT_TRANSFER
          - ERC721_EVENT_TRANSFER
          - ERC1155_EVENT_TRANSFER_SINGLE
          - ERC1155_EVENT_TRANSFER_BATCH
          - EVENT_MINT
          - EVENT_APPROVAL
          - NEW_BLOCK
        webhookUrl:
          description: URL of the webhook
          type: string
        confirmationsBlocks:
          description: Number of confirmation blocks
          type: number
      required:
      - address
      - network
      - type
      - webhookUrl
      - confirmationsBlocks
    CreateManyWatcherDto:
      type: object
      properties:
        networks:
          description: Networks of the watcher
          type: array
          items:
            type: string
            enum:
            - ethereum-mainnet
            - ethereum-ropsten
            - ethereum-goerli
            - binance-mainnet
            - binance-testnet
            - polygon-mainnet
            - polygon-mumbai
            - avalanche-fuji
            - avalanche-mainnet
        name:
          description: Name of the watchers
          type: string
        description:
          description: Description of the watchers
          type: string
        address:
          description: Address of the watchers
          type: string
        type:
          description: Type of events watched
          type: string
          enum:
          - MINED_TRANSACTION
          - ADDRESS_ACTIVITY
          - ADDRESS_RECEIVED_NATIVE_CURRENCY
          - ADDRESS_SENT_NATIVE_CURRENCY
          - EVENT_TRANSFER
          - ERC721_EVENT_TRANSFER
          - ERC1155_EVENT_TRANSFER_SINGLE
          - ERC1155_EVENT_TRANSFER_BATCH
          - EVENT_MINT
          - EVENT_APPROVAL
          - NEW_BLOCK
        webhookUrl:
          description: URL of the webhook
          type: string
        confirmationsBlocks:
          description: Number of confirmation blocks
          type: number
      required:
      - networks
      - address
      - type
      - webhookUrl
      - confirmationsBlocks
    FORBIDDEN:
      type: object
      properties:
        statusCode:
          type: number
          default: 401
        errorCode:
          type: string
          default: FORBIDDEN
        message:
          type: string
          default: Unauthorized.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    UserEntity:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        language:
          enum:
          - FR
          - EN
          type: string
        password:
          type: string
        emailVerified:
          type: boolean
        profile:
          "$ref": "#/components/schemas/UserProfileEntity"
        status:
          enum:
          - NOT_VERIFIED
          - VERIFIED
          - INACTIVE
          - ACTIVE
          type: string
        subscriptionPlan:
          enum:
          - FREE
          - TIER_1
          - ENTERPRISE
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
      - id
      - email
      - language
      - password
      - emailVerified
      - profile
      - status
      - subscriptionPlan
      - createdAt
      - updatedAt
    UserProfileEntity:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        role:
          type: string
        blockchainSkill:
          type: string
        sector:
          type: string
        user:
          "$ref": "#/components/schemas/UserEntity"
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
      - id
      - firstName
      - lastName
      - user
      - createdAt
      - updatedAt
    UpdateUserProfileDto:
      type: object
      properties:
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        phone:
          type: string
        blockchainSkill:
          type: string
          maxLength: 255
        role:
          type: string
          maxLength: 255
        sector:
          type: string
          maxLength: 255
    UpdateUserDto:
      type: object
      properties:
        profile:
          "$ref": "#/components/schemas/UpdateUserProfileDto"
        email:
          type: string
        language:
          type: string
          enum:
          - FR
          - EN
    EMAIL_ALREADY_EXISTS:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: EMAIL_ALREADY_EXISTS
        message:
          type: string
          default: A user with this email already exists.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    CreateUserProfileDto:
      type: object
      properties:
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        phone:
          type: string
        blockchainSkill:
          type: string
          maxLength: 255
        role:
          type: string
          maxLength: 255
        sector:
          type: string
          maxLength: 255
      required:
      - firstName
      - lastName
    CreateUserDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        profile:
          "$ref": "#/components/schemas/CreateUserProfileDto"
        language:
          type: string
          enum:
          - FR
          - EN
      required:
      - email
      - password
      - profile
    WRONG_PASSWORD:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: WRONG_PASSWORD
        message:
          type: string
          default: Incorrect password.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    ChangeUserPasswordDto:
      type: object
      properties:
        newPassword:
          type: string
        oldPassword:
          type: string
      required:
      - newPassword
      - oldPassword
    INVALID_JWT_TOKEN:
      type: object
      properties:
        statusCode:
          type: number
          default: 401
        errorCode:
          type: string
          default: INVALID_JWT_TOKEN
        message:
          type: string
          default: Invalid token.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    EMAIL_NOT_FOUND:
      type: object
      properties:
        statusCode:
          type: number
          default: '404'
        errorCode:
          type: string
          default: EMAIL_NOT_FOUND
        message:
          type: string
          default: A user with this email was not found.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    ResetUserPasswordDto:
      type: object
      properties:
        token:
          type: string
        password:
          type: string
      required:
      - token
      - password
    RequestResetUserPasswordDto:
      type: object
      properties:
        email:
          type: string
      required:
      - email
    UserVerifyEmailDto:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    USER_ACCOUNT_INACTIVE:
      type: object
      properties:
        statusCode:
          type: number
          default: 403
        errorCode:
          type: string
          default: USER_ACCOUNT_INACTIVE
        message:
          type: string
          default: Your account is not active.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    LoginDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
      - email
      - password
    COULD_NOT_GET_CONSUMER_PLUGIN:
      type: object
      properties:
        statusCode:
          type: number
          default: 500
        errorCode:
          type: string
          default: COULD_NOT_GET_CONSUMER_PLUGIN
        message:
          type: string
          default: Could not get consumer plugin.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    COULD_NOT_PERFORM_REQUEST:
      type: object
      properties:
        statusCode:
          type: number
          default: 500
        errorCode:
          type: string
          default: COULD_NOT_PERFORM_REQUEST
        message:
          type: string
          default: Unexpected error occurred performing the request.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    CreateApiKeyDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        scope:
          type: object
      required:
        - scope
    ApiKey:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        key:
          type: string
        consumer:
          type: object
          properties:
            id:
              required: true
              type: string
      required:
      - id
      - created_at
      - key
      - consumer
    COULD_NOT_CREATE_CONSUMER_PLUGIN:
      type: object
      properties:
        statusCode:
          type: number
          default: 500
        errorCode:
          type: string
          default: COULD_NOT_CREATE_CONSUMER_PLUGIN
        message:
          type: string
          default: Could not create consumer plugin.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    ProjectEntity:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        email:
          type: string
        color:
          type: string
        subscriptionPlan:
          enum:
          - FREE
          - TIER_1
          - ENTERPRISE
          type: string
        ownerId:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
      - id
      - name
      - email
      - color
      - subscriptionPlan
      - ownerId
      - createdAt
      - updatedAt
    CreateProjectDto:
      type: object
      properties:
        description:
          description: Description of the project
          type: string
        name:
          description: Name of the project
          type: string
          maxLength: 255
        email:
          description: Email of the user
          type: string
        color:
          type: string
      required:
      - name
    UpdateProjectDto:
      type: object
      properties:
        description:
          description: Description of the project
          type: string
        name:
          description: Name of the project
          type: string
          maxLength: 255
        email:
          description: Email of the user
          type: string
        color:
          type: string
    Kms:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        provider:
          type: object
        projectId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
          default: '2022-11-03T11:10:29.277Z'
        updatedAt:
          format: date-time
          type: string
          default: '2022-11-03T11:10:29.277Z'
      required:
      - id
      - name
      - provider
      - projectId
      - createdAt
      - updatedAt
    AwsKmsCredentialsDto:
      type: object
      properties:
        accountId:
          type: string
        accessKeyId:
          type: string
        secretAccessKey:
          type: string
        region:
          type: string
      required:
      - accountId
      - accessKeyId
      - secretAccessKey
      - region
    UpdateKmsDto:
      type: object
      properties:
        name:
          description: Name of the Key Management System
          type: string
        metadata:
          description: Metadata of the Key Management System
          type: object
        credentials:
          description: Identification information to access the AWS KMS
          "$ref": "#/components/schemas/AwsKmsCredentialsDto"
        provider:
          description: Key Management System's provider
          type: string
          enum:
          - AWS
    CreateKmsDto:
      type: object
      properties:
        name:
          description: Name of the Key Management System
          type: string
        metadata:
          description: Metadata of the Key Management System
          type: object
        credentials:
          description: Identification information to access the AWS KMS
          "$ref": "#/components/schemas/AwsKmsCredentialsDto"
        provider:
          description: Key Management System's provider
          type: string
          enum:
          - AWS
      required:
      - name
      - provider
    AwsKmsSignerCredentials:
      type: object
      properties:
        accessKeyId:
          type: string
        secretAccessKey:
          type: string
        region:
          type: string
        arn:
          type: string
      required:
      - accessKeyId
      - secretAccessKey
      - region
      - arn
    Wallet:
      type: object
      properties:
        address:
          type: string
        credentials:
          "$ref": "#/components/schemas/AwsKmsSignerCredentials"
        name:
          type: string
        description:
          type: string
        metadata:
          type: object
        external:
          type: boolean
        projectId:
          type: string
        createdAt:
          format: date-time
          type: string
          default: '2022-11-03T11:10:29.286Z'
        updatedAt:
          format: date-time
          type: string
          default: '2022-11-03T11:10:29.286Z'
      required:
      - address
      - credentials
      - external
      - projectId
      - createdAt
      - updatedAt
    UpdateWalletDto:
      type: object
      properties:
        description:
          description: Description of the wallet
          type: string
        name:
          description: Name of the wallet
          type: string
        metadata:
          description: metadata of the wallet
          type: object
    CreateWalletDto:
      type: object
      properties:
        description:
          description: Description of the wallet
          type: string
        name:
          description: Name of the wallet
          type: string
        metadata:
          description: metadata of the wallet
          type: object
        credentials:
          description: identification information on the KMS
          "$ref": "#/components/schemas/AwsKmsCredentialsDto"
    ImportProviderKeyDto:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        metadata:
          type: object
        providerKeyId:
          type: string
        provider:
          type: string
          enum:
            - AWS
      required:
        - provider
    SignMessageDto:
      type: object
      properties:
        message:
          description: message to be signed
          type: string
      required:
      - message
    COULD_NOT_PROCESS_ENTITY:
      type: object
      properties:
        statusCode:
          type: number
          default: 422
        errorCode:
          type: string
          default: COULD_NOT_PROCESS_ENTITY
        message:
          type: string
          default: Could not process entity.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    COULD_NOT_ASSIGN_NONCE:
      type: object
      properties:
        statusCode:
          type: number
          default: '500'
        errorCode:
          type: string
          default: COULD_NOT_ASSIGN_NONCE
        message:
          type: string
          default: Could not assign nonce.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    NoncesAvailable:
      type: object
      properties:
        nextNonce:
          type: number
        availableNonces:
          type: array
          items:
            type: number
      required:
      - nextNonce
      - availableNonces
    resyncNonce:
      type: object
      properties:
        nextNonce:
          type: number
      required:
      - nextNonce
    GasPrice:
      type: object
      properties:
        network:
          type: string
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
        low:
          type: object
        average:
          type: object
        fast:
          type: object
        fastest:
          type: object
        createdAt:
          format: date-time
          type: string
          default: '2022-11-03T11:10:29.308Z'
        updatedAt:
          format: date-time
          type: string
          default: '2022-11-03T11:10:29.308Z'
      required:
      - network
      - low
      - average
      - fast
      - fastest
      - createdAt
      - updatedAt
    TransactionLog:
      type: object
      properties:
        message:
          type: string
        type:
          type: string
          enum:
          - UNSIGNED
          - ERROR_TX
          - ERROR_PUBLISH
          - PUBLISHED
          - RECEIVED_BY_STARTON
          - COULD_NOT_ESTIMATE_GAS_PRICE
          - COULD_NOT_INCREASE_GAS_PRICE
          - GAS_PRICE_ESTIMATED
          - INVALID_GAS_PRICE
          - REPLACEMENT_GAS_PRICE_UNDERPRICED
          - COULD_NOT_ESTIMATE_GAS_LIMIT
          - GAS_LIMIT_ESTIMATED
          - EXECUTION_WILL_FAIL
          - INVALID_ARGUMENT
          - INSUFFICIENT_FUNDS
          - INSUFFICIENT_FUNDS_AFTER_BROADCAST
          - COULD_NOT_ASSIGN_NONCE
          - COULD_NOT_UNSTUCK_NONCE
          - NONCE_ASSIGNED
          - NONCE_EXPIRED
          - COULD_NOT_SIGN
          - SIGNED
          - SENT_TO_MEMPOOL
          - COULD_NOT_BROADCAST
          - ALREADY_KNOWN
          - MINED
          - CONFIRMED
          - REPLACED
          - FAILED
          - MONITORING_IN_PROGRESS
          - STUCK_BY_PREVIOUS_TRANSACTION
          - MAX_GAS_PRICE_REACH
          - GAS_PRICE_INCREASED
          - NEW_TRANSACTION_HASH
          - UNKNOWN
          - MONITORING_INTERRUPTED
        context:
          type: object
        createdAt:
          type: string
      required:
      - message
      - type
      - createdAt
    Transaction:
      type: object
      properties:
        id:
          type: string
        blockHash:
          type: string
        blockNumber:
          type: number
        chainId:
          type: number
        network:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
          type: string
        data:
          type: string
        from:
          type: string
        gasLimit:
          type: string
        gasPrice:
          type: string
        maxFeePerGas:
          type: string
        maxPriorityFeePerGas:
          type: string
        metadata:
          type: object
        nonce:
          type: number
        type:
          type: number
        signerWallet:
          type: string
        publishedDate:
          format: date-time
          type: string
        minedDate:
          format: date-time
          type: string
        signedTransaction:
          type: string
        status:
          enum:
          - UNSIGNED
          - ERROR_TX
          - ERROR_PUBLISH
          - PUBLISHED
          - RECEIVED_BY_STARTON
          - COULD_NOT_ESTIMATE_GAS_PRICE
          - COULD_NOT_INCREASE_GAS_PRICE
          - GAS_PRICE_ESTIMATED
          - INVALID_GAS_PRICE
          - REPLACEMENT_GAS_PRICE_UNDERPRICED
          - COULD_NOT_ESTIMATE_GAS_LIMIT
          - GAS_LIMIT_ESTIMATED
          - EXECUTION_WILL_FAIL
          - INVALID_ARGUMENT
          - INSUFFICIENT_FUNDS
          - INSUFFICIENT_FUNDS_AFTER_BROADCAST
          - COULD_NOT_ASSIGN_NONCE
          - COULD_NOT_UNSTUCK_NONCE
          - NONCE_ASSIGNED
          - NONCE_EXPIRED
          - COULD_NOT_SIGN
          - SIGNED
          - SENT_TO_MEMPOOL
          - COULD_NOT_BROADCAST
          - ALREADY_KNOWN
          - MINED
          - CONFIRMED
          - REPLACED
          - FAILED
          - MONITORING_IN_PROGRESS
          - STUCK_BY_PREVIOUS_TRANSACTION
          - MAX_GAS_PRICE_REACH
          - GAS_PRICE_INCREASED
          - NEW_TRANSACTION_HASH
          - UNKNOWN
          - MONITORING_INTERRUPTED
          type: string
        state:
          enum:
          - SUCCESS
          - PENDING
          - MANUAL_ACTION_REQUIRED
          - ERROR
          type: string
        speed:
          enum:
          - low
          - average
          - fast
          - fastest
          - custom
          type: string
        logs:
          type: array
          items:
            "$ref": "#/components/schemas/TransactionLog"
        to:
          type: string
        transactionHash:
          type: string
        value:
          type: string
        automaticNonce:
          type: boolean
        isDeployTransaction:
          type: boolean
        projectId:
          type: string
        createdAt:
          format: date-time
          type: string
          default: '2022-11-03T11:10:29.313Z'
        updatedAt:
          format: date-time
          type: string
          default: '2022-11-03T11:10:29.313Z'
      required:
      - id
      - chainId
      - network
      - from
      - signerWallet
      - status
      - state
      - logs
      - value
      - automaticNonce
      - isDeployTransaction
      - projectId
      - createdAt
      - updatedAt
    REPLACEMENT_UNDERPRICED:
      type: object
      properties:
        statusCode:
          type: number
          default: '422'
        errorCode:
          type: string
          default: REPLACEMENT_UNDERPRICED
        message:
          type: string
          default: Your transaction is underpriced. You try to replace an existing
            transaction with not enough gas fee.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    COULD_NOT_BROADCAST:
      type: object
      properties:
        statusCode:
          type: number
          default: '500'
        errorCode:
          type: string
          default: COULD_NOT_BROADCAST
        message:
          type: string
          default: Could not broadcast this transaction.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    NONCE_EXPIRED:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: NONCE_EXPIRED
        message:
          type: string
          default: Your nonce is too low.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    COULD_NOT_ESTIMATE_GAS_PRICE:
      type: object
      properties:
        statusCode:
          type: number
          default: '500'
        errorCode:
          type: string
          default: COULD_NOT_ESTIMATE_GAS_PRICE
        message:
          type: string
          default: Could not estimate gas price.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    NO_PROVIDER_FOR_NETWORK:
      type: object
      properties:
        statusCode:
          type: number
          default: 500
        errorCode:
          type: string
          default: NO_PROVIDER_FOR_NETWORK
        message:
          type: string
          default: No provider for network.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    COULD_NOT_SIGN:
      type: object
      properties:
        statusCode:
          type: number
          default: '500'
        errorCode:
          type: string
          default: COULD_NOT_SIGN
        message:
          type: string
          default: Could not sign transaction.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    EXECUTION_WILL_FAIL:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: EXECUTION_WILL_FAIL
        message:
          type: string
          default: This call will revert.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    INVALID_GAS_PRICE:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: INVALID_GAS_PRICE
        message:
          type: string
          default: Wrong gas price.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    INSUFFICIENT_FUNDS:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: INSUFFICIENT_FUNDS
        message:
          type: string
          default: Your funds are insufficient.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    ALREADY_KNOWN:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: ALREADY_KNOWN
        message:
          type: string
          default: This transaction is already known by the node.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    UNPREDICTABLE_GAS_LIMIT:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: UNPREDICTABLE_GAS_LIMIT
        message:
          type: string
          default: Could not estimate gas limit for this transaction.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    UNKNOWN:
      type: object
      properties:
        statusCode:
          type: number
          default: '500'
        errorCode:
          type: string
          default: UNKNOWN
        message:
          type: string
          default: Unknown error.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    CustomGasDto:
      type: object
      properties:
        gasPrice:
          type: string
        maxFeePerGas:
          type: string
        maxPriorityFeePerGas:
          type: string
    CreateTransactionDto:
      type: object
      properties:
        data:
          description: Transaction data that will be published on-chain
          type: string
        gasLimit:
          description: Maximum gas allowed to be used for the transaction
          type: string
        speed:
          description: Speed for the transaction
          type: string
          enum:
          - low
          - average
          - fast
          - fastest
          - custom
        customGas:
          "$ref": "#/components/schemas/CustomGasDto"
        metadata:
          description: Metadata of the transaction. Visible on-chain.
          type: object
        network:
          description: Network on which are deployed the smart contracts.
          type: string
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
        nonce:
          description: 'Index of the transaction. Used to prevent replay attacks.'
          type: number
        signerWallet:
          description: Address to use to sign the transaction
          type: string
        to:
          description: Address of the receiver
          type: string
        value:
          description: Amount of native currency transferred
          type: string
      required:
      - network
      - signerWallet
    COULD_NOT_MONITOR_TRANSACTIONS:
      type: object
      properties:
        statusCode:
          type: number
          default: '500'
        errorCode:
          type: string
          default: COULD_NOT_MONITOR_TRANSACTIONS
        message:
          type: string
          default: Could not relaunch monitoring on 'PENDING' transactions
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    MonitorTransactionsDto:
      type: object
      properties:
        signerWallet:
          type: string
        network:
          type: string
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
    GasPriceInfo:
      type: object
      properties:
        maxFeePerGas:
          type: string
        maxPriorityFeePerGas:
          type: string
        gasPrice:
          type: string
      required:
      - maxFeePerGas
      - maxPriorityFeePerGas
      - gasPrice
    SettingRelayer:
      type: object
      properties:
        id:
          type: string
        projectId:
          type: string
        network:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
          type: string
        unstuckMaxGasPrice:
          "$ref": "#/components/schemas/GasPriceInfo"
        unstuckMissingNonce:
          type: boolean
        unstuckMissingNonceDelay:
          type: number
        unstuckCustomGasPrice:
          type: boolean
        unstuckAutomaticGasPrice:
          type: boolean
        unstuckGasPriceDelay:
          type: number
        unstuckConcurrency:
          type: number
        createdAt:
          format: date-time
          type: string
          default: '2022-11-03T11:10:29.341Z'
        updatedAt:
          format: date-time
          type: string
          default: '2022-11-03T11:10:29.341Z'
      required:
      - id
      - projectId
      - network
      - unstuckMaxGasPrice
      - unstuckMissingNonce
      - unstuckMissingNonceDelay
      - unstuckCustomGasPrice
      - unstuckAutomaticGasPrice
      - unstuckGasPriceDelay
      - unstuckConcurrency
      - createdAt
      - updatedAt
    UnstuckMaxGasPriceDto:
      type: object
      properties:
        gasPrice:
          type: string
        maxFeePerGas:
          type: string
        maxPriorityFeePerGas:
          type: string
      required:
      - gasPrice
      - maxFeePerGas
      - maxPriorityFeePerGas
    UpdateSettingRelayerDto:
      type: object
      properties:
        unstuckMaxGasPrice:
          "$ref": "#/components/schemas/UnstuckMaxGasPriceDto"
        unstuckMissingNonce:
          type: boolean
        unstuckMissingNonceDelay:
          type: number
          minimum: 10
          maximum: 3600
        unstuckCustomGasPrice:
          type: boolean
        unstuckAutomaticGasPrice:
          type: boolean
        unstuckGasPriceDelay:
          type: number
          minimum: 10
          maximum: 3600
        unstuckConcurrency:
          type: number
          minimum: 1
          maximum: 100
    RequireFaucetDto:
      type: object
      properties:
        wallet:
          description: 'Address on which faucet will be received.'
          type: string
        captchaToken:
          type: string
      required:
      - kms
      - captchaToken
    Faucet:
      type: object
      properties:
        id:
          type: string
        ip:
          type: string
        wallet:
          type: string
        network:
          type: string
          enum:
          - ethereum-ropsten
          - ethereum-goerli
          - binance-testnet
          - polygon-mumbai
          - avalanche-fuji
        userId:
          type: string
        txHash:
          type: string
        createdAt:
          format: date-time
          type: string
          default: '2022-11-03T11:10:29.351Z'
      required:
      - id
      - ip
      - kms
      - network
      - createdAt
    CompilationDetails:
      type: object
      properties:
        source:
          type: string
        bytecode:
          type: string
        compilerVersion:
          type: string
        contractName:
          type: string
        optimizationUsed:
          type: boolean
        runs:
          type: number
      required:
      - bytecode
    SmartContract:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        network:
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
          type: string
        abi:
          type: array
          items:
            type: object
        address:
          type: string
        params:
          type: array
          items:
            type: object
        compilationDetails:
          "$ref": "#/components/schemas/CompilationDetails"
        creationHash:
          type: string
        status:
          enum:
          - UNSIGNED
          - ERROR_TX
          - ERROR_PUBLISH
          - PUBLISHED
          - RECEIVED_BY_STARTON
          - COULD_NOT_ESTIMATE_GAS_PRICE
          - COULD_NOT_INCREASE_GAS_PRICE
          - GAS_PRICE_ESTIMATED
          - INVALID_GAS_PRICE
          - REPLACEMENT_GAS_PRICE_UNDERPRICED
          - COULD_NOT_ESTIMATE_GAS_LIMIT
          - GAS_LIMIT_ESTIMATED
          - EXECUTION_WILL_FAIL
          - INVALID_ARGUMENT
          - INSUFFICIENT_FUNDS
          - INSUFFICIENT_FUNDS_AFTER_BROADCAST
          - COULD_NOT_ASSIGN_NONCE
          - COULD_NOT_UNSTUCK_NONCE
          - NONCE_ASSIGNED
          - NONCE_EXPIRED
          - COULD_NOT_SIGN
          - SIGNED
          - SENT_TO_MEMPOOL
          - COULD_NOT_BROADCAST
          - ALREADY_KNOWN
          - MINED
          - CONFIRMED
          - REPLACED
          - FAILED
          - MONITORING_IN_PROGRESS
          - STUCK_BY_PREVIOUS_TRANSACTION
          - MAX_GAS_PRICE_REACH
          - GAS_PRICE_INCREASED
          - NEW_TRANSACTION_HASH
          - UNKNOWN
          - MONITORING_INTERRUPTED
          type: string
        state:
          enum:
          - SUCCESS
          - PENDING
          - MANUAL_ACTION_REQUIRED
          - ERROR
          type: string
        minedDate:
          format: date-time
          type: string
        blockNumber:
          type: number
        templateId:
          type: string
        projectId:
          type: string
        createdAt:
          format: date-time
          type: string
          default: '2022-11-03T11:10:29.359Z'
        updatedAt:
          format: date-time
          type: string
          default: '2022-11-03T11:10:29.359Z'
      required:
      - id
      - name
      - network
      - address
      - status
      - state
      - projectId
      - createdAt
      - updatedAt
    UpdateSmartContractDto:
      type: object
      properties:
        description:
          description: Description the smart contract will be updated to
          type: string
        name:
          description: Name the smart contract will be updated to
          type: string
          maxLength: 255
        metadata:
          type: object
    INVALID_BYTECODE:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: INVALID_BYTECODE
        message:
          type: string
          default: Your bytecode is invalid.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    INVALID_ABI:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: INVALID_ABI
        message:
          type: string
          default: INVALID_ABI
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    MISSING_ARGUMENT:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: MISSING_ARGUMENT
        message:
          type: string
          default: Some params are missing.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    UNEXPECTED_ARGUMENT:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: UNEXPECTED_ARGUMENT
        message:
          type: string
          default: Your params are invalid.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    INVALID_ARGUMENT:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: INVALID_ARGUMENT
        message:
          type: string
          default: Some params are invalid.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    CALL_EXCEPTION:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: CALL_EXCEPTION
        message:
          type: string
          default: Your call to the blockchain encounters revert.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    NUMERIC_FAULT:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: NUMERIC_FAULT
        message:
          type: string
          default: Illegal operations with numerical values.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    ENS_NOT_SUPPORTED:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: ENS_NOT_SUPPORTED
        message:
          type: string
          default: ENS is not supported on this network.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    AbiInputDto:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        internalType:
          type: string
        indexed:
          type: boolean
        components:
          type: object
      required:
      - name
      - type
    AbiOutputDto:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        internalType:
          type: string
      required:
      - name
      - type
    AbiObjectDto:
      type: object
      properties:
        type:
          type: string
          enum:
          - constructor
          - event
          - function
          - receive
          - fallback
          - error
        name:
          type: string
        stateMutability:
          type: string
          enum:
          - pure
          - view
          - nonpayable
          - payable
        payability:
          type: boolean
        constant:
          type: boolean
        anonymous:
          type: boolean
        inputs:
          "$ref": "#/components/schemas/AbiInputDto"
        outputs:
          "$ref": "#/components/schemas/AbiOutputDto"
      required:
      - type
    DeployFromBytecodeDto:
      type: object
      properties:
        abi:
          description: ABI of the smart contract
          type: array
          items:
            "$ref": "#/components/schemas/AbiObjectDto"
        params:
          description: Smart contract's constructor's parameters
          default: []
          type: array
          items:
            type: object
        speed:
          description: Speed for the transaction
          type: string
          enum:
          - low
          - average
          - fast
          - fastest
          - custom
        customGas:
          "$ref": "#/components/schemas/CustomGasDto"
        gasLimit:
          description: Maximum gas fees you're willing to pay
          type: string
        network:
          description: network on which the transaction will occur
          type: string
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
        bytecode:
          description: Bytecode of the smart contract
          type: string
        description:
          description: Description of this smart contract that will be displayed on our dashboard
          type: string
        name:
          description: Name of the smart contract that will be displayed on our dashboard
          type: string
          maxLength: 255
        signerWallet:
          description: Address of the wallet to use to sign the transaction
          type: string
        nonce:
          description: Nonce to use for the transaction
          type: number
        value:
          description: Amount of native currency to use in the transaction
          type: string
      required:
      - abi
      - params
      - network
      - bytecode
      - name
      - signerWallet
    DeploySmartContractResponse:
      type: object
      properties:
        smartContract:
          "$ref": "#/components/schemas/SmartContract"
        transaction:
          "$ref": "#/components/schemas/Transaction"
      required:
      - smartContract
      - transaction
    MICROSERVICE_NOT_RESPONDING:
      type: object
      properties:
        statusCode:
          type: number
          default: 500
        errorCode:
          type: string
          default: MICROSERVICE_NOT_RESPONDING
        message:
          type: string
          default: MICROSERVICE_NOT_RESPONDING
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    SMART_CONTRACT_NOT_ACTIVATED:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: SMART_CONTRACT_NOT_ACTIVATED
        message:
          type: string
          default: This smart contract is not active.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    DeployFromTemplateDto:
      type: object
      properties:
        network:
          description: Network on which are deployed the smart contracts
          type: string
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
        signerWallet:
          description: Address of the wallet signing the transaction
          type: string
        templateId:
          description: Id of the smart contract template
          type: string
        name:
          description: Name of the smart contract that will be displayed on our dashboard
          type: string
          maxLength: 255
        description:
          description: Description of this smart contract that will be displayed on our dashboard
          type: string
        params:
          description: Smart contract's constructor's parameters
          default: []
          type: array
          items:
            type: object
        gasLimit:
          description: Maximum gas allowed to be used for the transaction
          type: string
        speed:
          description: Speed for the transaction
          type: string
          enum:
          - low
          - average
          - fast
          - fastest
          - custom
        customGas:
          "$ref": "#/components/schemas/CustomGasDto"
        nonce:
          description: Nonce to use for the transaction
          type: number
        value:
          description: Amount of native currency to use in the transaction
          type: string
      required:
      - network
      - signerWallet
      - templateId
      - name
      - params
    INVALID_FUNCTION:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: INVALID_FUNCTION
        message:
          type: string
          default: Some params are invalid.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    CallDto:
      type: object
      properties:
        functionName:
          description: name of the function
          type: string
        params:
          description: 'Smart contract constructor parameters'
          default: []
          type: array
          items:
            type: object
        speed:
          description: Speed for the transaction
          type: string
          enum:
          - low
          - average
          - fast
          - fastest
          - custom
        customGas:
          "$ref": "#/components/schemas/CustomGasDto"
        gasLimit:
          description: Maximum gas allowed to be used for the transaction
          type: string
        signerWallet:
          description: The address which will sign the transaction
          type: string
        nonce:
          description: Nonce to use for the transaction
          type: number
        value:
          description: Amount of native currency to use in the call
          type: string
      required:
      - functionName
      - params
      - signerWallet
    ReadDto:
      type: object
      properties:
        functionName:
          description: Name of the smart contract's function to call
          type: string
        params:
          description: Smart contract's constructor's parameters
          default: []
          type: array
          items:
            type: object
      required:
      - functionName
      - params
    ReadSmartContractResponse:
      type: object
      properties:
        response:
          type: string
        functionName:
          type: string
        params:
          type: array
          items:
            type: object
        address:
          type: string
        network:
          type: string
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
      required:
      - response
      - functionName
      - params
      - address
      - network
    AvailableFunctions:
      type: object
      properties:
        call:
          type: array
          items:
            type: string
        read:
          type: array
          items:
            type: string
        events:
          type: array
          items:
            type: string
      required:
      - call
      - read
      - events
    INVALID_CONTRACT_ADDRESS:
      type: object
      properties:
        statusCode:
          type: number
          default: '400'
        errorCode:
          type: string
          default: INVALID_CONTRACT_ADDRESS
        message:
          type: string
          default: This address doesn't refer to a smart-contract on this network.
        timestamp:
          type: string
        path:
          type: string
        context:
          type: object
      required:
      - statusCode
      - errorCode
      - message
      - timestamp
      - path
    ImportSmartContractDto:
      type: object
      properties:
        abi:
          description: ABI of the smart contract
          type: array
          items:
            "$ref": "#/components/schemas/AbiObjectDto"
        network:
          description: Network on which are deployed the smart contracts.
          type: string
          enum:
          - ethereum-mainnet
          - ethereum-ropsten
          - ethereum-goerli
          - binance-mainnet
          - binance-testnet
          - polygon-mainnet
          - polygon-mumbai
          - avalanche-mainnet
          - avalanche-fuji
        description:
          description: Description of this smart contract that will be displayed on our dashboard
          type: string
        name:
          description: Name of the smart contract that will be displayed on our dashboard
          type: string
          maxLength: 255
        address:
          description: Address of the smart contract to import on the given network
          type: string
      required:
      - abi
      - network
      - name
      - address
